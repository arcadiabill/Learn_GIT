<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<title>Big Integer Calculator - Arbitrary Precision Arithmetic</title>
<meta name="KEYWORDS" content="arbitrary precision,arbitrary precision arithmetic,high precision,calculator,arithmetic,addition,subtraction,multpiplication,divisors,factors,calculator,javascript,BigInt,big integer">
<meta name="DESCRIPTION" content="This online calculator helps you perform arithmetic operations with 100+ digit numbers using BigInt.js.">

<!-- Copyright (C) 2011 Alexei Kourbatov, www.JavaScripter.net -->

<script type="text/javascript" wassrc="100digitbigintcalculator_files/BigInt.js">
////////////////////////////////////////////////////////////////////////////////////////
// Big Integer Library v. 5.4
// Created 2000, last modified 2009
// Leemon Baird
// www.leemon.com
//
// Version history:
// v 5.4  3 Oct 2009
//   - added "var i" to greaterShift() so i is not global. (Thanks to PÄter Szabù for finding that bug)
//
// v 5.3  21 Sep 2009
//   - added randProbPrime(k) for probable primes
//   - unrolled loop in mont_ (slightly faster)
//   - millerRabin now takes a bigInt parameter rather than an int
//
// v 5.2  15 Sep 2009
//   - fixed capitalization in call to int2bigInt in randBigInt
//     (thanks to Emili Evripidou, Reinhold Behringer, and Samuel Macaleese for finding that bug)
//
// v 5.1  8 Oct 2007
//   - renamed inverseModInt_ to inverseModInt since it doesn't change its parameters
//   - added functions GCD and randBigInt, which call GCD_ and randBigInt_
//   - fixed a bug found by Rob Visser (see comment with his name below)
//   - improved comments
//
// This file is public domain.   You can use it for any purpose without restriction.
// I do not guarantee that it is correct, so use it at your own risk.  If you use
// it for something interesting, I'd appreciate hearing about it.  If you find
// any bugs or make any improvements, I'd appreciate hearing about those too.
// It would also be nice if my name and URL were left in the comments.  But none
// of that is required.
//
// This code defines a bigInt library for arbitrary-precision integers.
// A bigInt is an array of integers storing the value in chunks of bpe bits,
// little endian (buff[0] is the least significant word).
// Negative bigInts are stored two's complement.  Almost all the functions treat
// bigInts as nonnegative.  The few that view them as two's complement say so
// in their comments.  Some functions assume their parameters have at least one
// leading zero element. Functions with an underscore at the end of the name put
// their answer into one of the arrays passed in, and have unpredictable behavior
// in case of overflow, so the caller must make sure the arrays are big enough to
// hold the answer.  But the average user should never have to call any of the
// underscored functions.  Each important underscored function has a wrapper function
// of the same name without the underscore that takes care of the details for you.
// For each underscored function where a parameter is modified, that same variable
// must not be used as another argument too.  So, you cannot square x by doing
// multMod_(x,x,n).  You must use squareMod_(x,n) instead, or do y=dup(x); multMod_(x,y,n).
// Or simply use the multMod(x,x,n) function without the underscore, where
// such issues never arise, because non-underscored functions never change
// their parameters; they always allocate new memory for the answer that is returned.
//
// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.
// For most functions, if it needs a BigInt as a local variable it will actually use
// a global, and will only allocate to it only when it's not the right size.  This ensures
// that when a function is called repeatedly with same-sized parameters, it only allocates
// memory on the first call.
//
// Note that for cryptographic purposes, the calls to Math.random() must
// be replaced with calls to a better pseudorandom number generator.
//
// In the following, "bigInt" means a bigInt with at least one leading zero element,
// and "integer" means a nonnegative integer less than radix.  In some cases, integer
// can be negative.  Negative bigInts are 2s complement.
//
// The following functions do not modify their inputs.
// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.
// Those returning a boolean will return the integer 0 (false) or 1 (true).
// Those returning boolean or int will not allocate memory except possibly on the first
// time they're called with a given parameter size.
//
// bigInt  add(x,y)               //return (x+y) for bigInts x and y.
// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.
// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95
// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros
// bigInt  dup(x)                 //return a copy of bigInt x
// boolean equals(x,y)            //is the bigInt x equal to the bigint y?
// boolean equalsInt(x,y)         //is bigint x equal to integer y?
// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed
// Array   findPrimes(n)          //return array of all primes less than integer n
// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).
// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)
// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?
// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements
// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null
// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse
// boolean isZero(x)              //is the bigInt x equal to zero?
// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)
// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)
// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.
// int     modInt(x,n)            //return x mod n for bigInt x and integer n.
// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.
// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.
// boolean negative(x)            //is bigInt x negative?
// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.
// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.
// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.
// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).
// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements
// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement
// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements
//
//
// The following functions each have a non-underscored version, which most users should call instead.
// These functions each write to a single parameter, and the caller is responsible for ensuring the array
// passed in is large enough to hold the result.
//
// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer
// void    add_(x,y)             //do x=x+y for bigInts x and y
// void    copy_(x,y)            //do x=y on bigInts x and y
// void    copyInt_(x,n)         //do x=n on bigInt x and integer n
// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).
// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist
// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).
// void    mult_(x,y)            //do x=x*y for bigInts x and y.
// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.
// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.
// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.
// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.
// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.
//
// The following functions do NOT have a non-underscored version.
// They each write a bigInt result to one or more parameters.  The caller is responsible for
// ensuring the arrays passed in are large enough to hold the results.
//
// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))
// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.
// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r
// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).
// int  eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y
// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).
// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.
// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b
// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys
// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)
// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.
// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).
// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n
// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.
//
// The following functions are based on algorithms from the _Handbook of Applied Cryptography_
//    powMod_()           = algorithm 14.94, Montgomery exponentiation
//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_
//    GCD_()              = algorothm 14.57, Lehmer's algorithm
//    mont_()             = algorithm 14.36, Montgomery multiplication
//    divide_()           = algorithm 14.20  Multiple-precision division
//    squareMod_()        = algorithm 14.16  Multiple-precision squaring
//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm
//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm
//
// Profiling shows:
//     randTruePrime_() spends:
//         10% of its time in calls to powMod_()
//         85% of its time in calls to millerRabin()
//     millerRabin() spends:
//         99% of its time in calls to powMod_()   (always with a base of 2)
//     powMod_() spends:
//         94% of its time in calls to mont_()  (almost always with x==y)
//
// This suggests there are several ways to speed up this library slightly:
//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)
//         -- this should especially focus on being fast when raising 2 to a power mod n
//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test
//     - tune the parameters in randTruePrime_(), including c, m, and recLimit
//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking
//       within the loop when all the parameters are the same length.
//
// There are several ideas that look like they wouldn't help much at all:
//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)
//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)
//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square
//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that
//       method would be slower.  This is unfortunate because the code currently spends almost all of its time
//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring
//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded
//       sentences that seem to imply it's faster to do a non-modular square followed by a single
//       Montgomery reduction, but that's obviously wrong.
////////////////////////////////////////////////////////////////////////////////////////

//globals
bpe=0;         //bits stored per array element
mask=0;        //AND this with an array element to chop it down to bpe bits
radix=mask+1;  //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.

//the digits for converting to different bases
digitsStr='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\'\"+-';

//initialize the global variables
for (bpe=0; (1<<(bpe+1)) > (1<<bpe); bpe++);  //bpe=number of bits in the mantissa on this platform
bpe>>=1;                   //bpe=number of bits in one element of the array representing the bigInt
mask=(1<<bpe)-1;           //AND the mask with an integer to get its bpe least significant bits
radix=mask+1;              //2^bpe.  a single 1 bit to the left of the first bit of mask
one=int2bigInt(1,1,1);     //constant used in powMod_()

//the following global variables are scratchpad memory to
//reduce dynamic memory allocation in the inner loop
t=new Array(0);
ss=t;       //used in mult_()
s0=t;       //used in multMod_(), squareMod_()
s1=t;       //used in powMod_(), multMod_(), squareMod_()
s2=t;       //used in powMod_(), multMod_()
s3=t;       //used in powMod_()
s4=t; s5=t; //used in mod_()
s6=t;       //used in bigInt2str()
s7=t;       //used in powMod_()
T=t;        //used in GCD_()
sa=t;       //used in mont_()
mr_x1=t; mr_r=t; mr_a=t;                                      //used in millerRabin()
eg_v=t; eg_u=t; eg_A=t; eg_B=t; eg_C=t; eg_D=t;               //used in eGCD_(), inverseMod_()
md_q1=t; md_q2=t; md_q3=t; md_r=t; md_r1=t; md_r2=t; md_tt=t; //used in mod_()

primes=t; pows=t; s_i=t; s_i2=t; s_R=t; s_rm=t; s_q=t; s_n1=t;
  s_a=t; s_r2=t; s_n=t; s_b=t; s_d=t; s_x1=t; s_x2=t, s_aa=t; //used in randTruePrime_()

rpprb=t; //used in randProbPrimeRounds() (which also uses "primes")

////////////////////////////////////////////////////////////////////////////////////////


//return array of all primes less than integer n
function findPrimes(n) {
  var i,s,p,ans;
  s=new Array(n);
  for (i=0;i<n;i++)
    s[i]=0;
  s[0]=2;
  p=0;    //first p elements of s are primes, the rest are a sieve
  for(;s[p]<n;) {                  //s[p] is the pth prime
    for(i=s[p]*s[p]; i<n; i+=s[p]) //mark multiples of s[p]
      s[i]=1;
    p++;
    s[p]=s[p-1]+1;
    for(; s[p]<n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)
  }
  ans=new Array(p);
  for(i=0;i<p;i++)
    ans[i]=s[i];
  return ans;
}


//does a single round of Miller-Rabin base b consider x to be a possible prime?
//x is a bigInt, and b is an integer, with b<x
function millerRabinInt(x,b) {

  if (mr_x1.length!=x.length) {
    mr_x1=dup(x);
    mr_r=dup(x);
    mr_a=dup(x);
  }

  copyInt_(mr_a,b);
  return millerRabin(x,mr_a);
}

//does a single round of Miller-Rabin base b consider x to be a possible prime?
//x and b are bigInts with b<x
function millerRabin(x,b) {
  var i,j,k,s;

  if (mr_x1.length!=x.length) {
    mr_x1=dup(x);
    mr_r=dup(x);
    mr_a=dup(x);
  }

  copy_(mr_a,b);
  copy_(mr_r,x);
  copy_(mr_x1,x);

  addInt_(mr_r,-1);
  addInt_(mr_x1,-1);

  //s=the highest power of two that divides mr_r
  /*
  k=0;
  for (i=0;i<mr_r.length;i++)
    for (j=1;j<mask;j<<=1)
      if (x[i] & j) {
        s=(k<mr_r.length+bpe ? k : 0);
         i=mr_r.length;
         j=mask;
      } else
        k++;
  */
  // FIX:
  if (isZero(mr_r)) return 0;
  for (k=0; mr_r[k]==0; k++);
  for (i=1,j=2; mr_r[k]%j==0; j*=2,i++ );
  s = k*bpe + i - 1;

  /*
  alert ('';
   +'\n bpe='+bpe
   +'\n k='+k
   +'\n i='+i
   +'\n s='+s
  );
  if (s==0) { s=1;   alert ('s='+s)  }
  */

  if (s)
    rightShift_(mr_r,s);

  powMod_(mr_a,mr_r,x);

  if (!equalsInt(mr_a,1) && !equals(mr_a,mr_x1)) {
    j=1;
    while (j<=s-1 && !equals(mr_a,mr_x1)) {
      squareMod_(mr_a,x);
      if (equalsInt(mr_a,1)) {
        return 0;
      }
      j++;
    }
    if (!equals(mr_a,mr_x1)) {
      return 0;
    }
  }
  return 1;
}

//returns how many bits long the bigInt is, not counting leading zeros.
function bitSize(x) {
  var j,z,w;
  for (j=x.length-1; (x[j]==0) && (j>0); j--);
  for (z=0,w=x[j]; w; (w>>=1),z++);
  z+=bpe*j;
  return z;
}

//return a copy of x with at least n elements, adding leading zeros if needed
function expand(x,n) {
  var ans=int2bigInt(0,(x.length>n ? x.length : n)*bpe,0);
  copy_(ans,x);
  return ans;
}

//return a k-bit true random prime using Maurer's algorithm.
function randTruePrime(k) {
  var ans=int2bigInt(0,k,0);
  randTruePrime_(ans,k);
  return trim(ans,1);
}

//return a k-bit random probable prime with probability of error < 2^-80
function randProbPrime(k) {
  if (k>=600) return randProbPrimeRounds(k,2); //numbers from HAC table 4.3
  if (k>=550) return randProbPrimeRounds(k,4);
  if (k>=500) return randProbPrimeRounds(k,5);
  if (k>=400) return randProbPrimeRounds(k,6);
  if (k>=350) return randProbPrimeRounds(k,7);
  if (k>=300) return randProbPrimeRounds(k,9);
  if (k>=250) return randProbPrimeRounds(k,12); //numbers from HAC table 4.4
  if (k>=200) return randProbPrimeRounds(k,15);
  if (k>=150) return randProbPrimeRounds(k,18);
  if (k>=100) return randProbPrimeRounds(k,27);
              return randProbPrimeRounds(k,40); //number from HAC remark 4.26 (only an estimate)
}

//return a k-bit probable random prime using n rounds of Miller Rabin (after trial division with small primes)
function randProbPrimeRounds(k,n) {
  var ans, i, divisible, B;
  B=30000;  //B is largest prime to use in trial division
  ans=int2bigInt(0,k,0);

  //optimization: try larger and smaller B to find the best limit.

  if (primes.length==0)
    primes=findPrimes(30000);  //check for divisibility by primes <=30000

  if (rpprb.length!=ans.length)
    rpprb=dup(ans);

  for (;;) { //keep trying random values for ans until one appears to be prime
    //optimization: pick a random number times L=2*3*5*...*p, plus a
    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.
    //   This can reduce the amount of random number generation.

    randBigInt_(ans,k,0); //ans = a random odd number to check
    ans[0] |= 1;
    divisible=0;

    //check ans for divisibility by small primes up to B
    for (i=0; (i<primes.length) && (primes[i]<=B); i++)
      if (modInt(ans,primes[i])==0 && !equalsInt(ans,primes[i])) {
        divisible=1;
        break;
      }

    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.

    //do n rounds of Miller Rabin, with random bases less than ans
    for (i=0; i<n && !divisible; i++) {
      randBigInt_(rpprb,k,0);
      while(!greater(ans,rpprb)) //pick a random rpprb that's < ans
        randBigInt_(rpprb,k,0);
      if (!millerRabin(ans,rpprb))
        divisible=1;
    }

    if(!divisible)
      return ans;
  }
}

//return a new bigInt equal to (x mod n) for bigInts x and n.
function mod(x,n) {
  var ans=dup(x);
  mod_(ans,n);
  return trim(ans,1);
}

//return (x+n) where x is a bigInt and n is an integer.
function addInt(x,n) {
  var ans=expand(x,x.length+1);
  addInt_(ans,n);
  return trim(ans,1);
}

//return x*y for bigInts x and y. This is faster when y<x.
function mult(x,y) {
  var ans=expand(x,x.length+y.length);
  mult_(ans,y);
  return trim(ans,1);
}

//return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.
function powMod(x,y,n) {
  var ans=expand(x,n.length);
  powMod_(ans,trim(y,2),trim(n,2),0);  //this should work without the trim, but doesn't
  return trim(ans,1);
}

//return (x-y) for bigInts x and y.  Negative answers will be 2s complement
function sub(x,y) {
  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1));
  sub_(ans,y);
  return trim(ans,1);
}

//return (x+y) for bigInts x and y.
function add(x,y) {
  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1));
  add_(ans,y);
  return trim(ans,1);
}

//return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null
function inverseMod(x,n) {
  var ans=expand(x,n.length);
  var s;
  s=inverseMod_(ans,n);
  return s ? trim(ans,1) : null;
}

//return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.
function multMod(x,y,n) {
  var ans=expand(x,n.length);
  multMod_(ans,y,n);
  return trim(ans,1);
}

//generate a k-bit true random prime using Maurer's algorithm,
//and put it into ans.  The bigInt ans must be large enough to hold it.
function randTruePrime_(ans,k) {
  var c,m,pm,dd,j,r,B,divisible,z,zz,recSize;

  if (primes.length==0)
    primes=findPrimes(30000);  //check for divisibility by primes <=30000

  if (pows.length==0) {
    pows=new Array(512);
    for (j=0;j<512;j++) {
      pows[j]=Math.pow(2,j/511.-1.);
    }
  }

  //c and m should be tuned for a particular machine and value of k, to maximize speed
  c=0.1;  //c=0.1 in HAC
  m=20;   //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits
  recLimit=20; //stop recursion when k <=recLimit.  Must have recLimit >= 2

  if (s_i2.length!=ans.length) {
    s_i2=dup(ans);
    s_R =dup(ans);
    s_n1=dup(ans);
    s_r2=dup(ans);
    s_d =dup(ans);
    s_x1=dup(ans);
    s_x2=dup(ans);
    s_b =dup(ans);
    s_n =dup(ans);
    s_i =dup(ans);
    s_rm=dup(ans);
    s_q =dup(ans);
    s_a =dup(ans);
    s_aa=dup(ans);
  }

  if (k <= recLimit) {  //generate small random primes by trial division up to its square root
    pm=(1<<((k+2)>>1))-1; //pm is binary number with all ones, just over sqrt(2^k)
    copyInt_(ans,0);
    for (dd=1;dd;) {
      dd=0;
      ans[0]= 1 | (1<<(k-1)) | Math.floor(Math.random()*(1<<k));  //random, k-bit, odd integer, with msb 1
      for (j=1;(j<primes.length) && ((primes[j]&pm)==primes[j]);j++) { //trial division by all primes 3...sqrt(2^k)
        if (0==(ans[0]%primes[j])) {
          dd=1;
          break;
        }
      }
    }
    carry_(ans);
    return;
  }

  B=c*k*k;    //try small primes up to B (or all the primes[] array if the largest is less than B).
  if (k>2*m)  //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits
    for (r=1; k-k*r<=m; )
      r=pows[Math.floor(Math.random()*512)];   //r=Math.pow(2,Math.random()-1);
  else
    r=.5;

  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.

  recSize=Math.floor(r*k)+1;

  randTruePrime_(s_q,recSize);
  copyInt_(s_i2,0);
  s_i2[Math.floor((k-2)/bpe)] |= (1<<((k-2)%bpe));   //s_i2=2^(k-2)
  divide_(s_i2,s_q,s_i,s_rm);                        //s_i=floor((2^(k-1))/(2q))

  z=bitSize(s_i);

  for (;;) {
    for (;;) {  //generate z-bit numbers until one falls in the range [0,s_i-1]
      randBigInt_(s_R,z,0);
      if (greater(s_i,s_R))
        break;
    }                //now s_R is in the range [0,s_i-1]
    addInt_(s_R,1);  //now s_R is in the range [1,s_i]
    add_(s_R,s_i);   //now s_R is in the range [s_i+1,2*s_i]

    copy_(s_n,s_q);
    mult_(s_n,s_R);
    multInt_(s_n,2);
    addInt_(s_n,1);    //s_n=2*s_R*s_q+1

    copy_(s_r2,s_R);
    multInt_(s_r2,2);  //s_r2=2*s_R

    //check s_n for divisibility by small primes up to B
    for (divisible=0,j=0; (j<primes.length) && (primes[j]<B); j++)
      if (modInt(s_n,primes[j])==0 && !equalsInt(s_n,primes[j])) {
        divisible=1;
        break;
      }

    if (!divisible)    //if it passes small primes check, then try a single Miller-Rabin base 2
      if (!millerRabinInt(s_n,2)) //this line represents 75% of the total runtime for randTruePrime_
        divisible=1;

    if (!divisible) {  //if it passes that test, continue checking s_n
      addInt_(s_n,-3);
      for (j=s_n.length-1;(s_n[j]==0) && (j>0); j--);  //strip leading zeros
      for (zz=0,w=s_n[j]; w; (w>>=1),zz++);
      zz+=bpe*j;                             //zz=number of bits in s_n, ignoring leading zeros
      for (;;) {  //generate z-bit numbers until one falls in the range [0,s_n-1]
        randBigInt_(s_a,zz,0);
        if (greater(s_n,s_a))
          break;
      }                //now s_a is in the range [0,s_n-1]
      addInt_(s_n,3);  //now s_a is in the range [0,s_n-4]
      addInt_(s_a,2);  //now s_a is in the range [2,s_n-2]
      copy_(s_b,s_a);
      copy_(s_n1,s_n);
      addInt_(s_n1,-1);
      powMod_(s_b,s_n1,s_n);   //s_b=s_a^(s_n-1) modulo s_n
      addInt_(s_b,-1);
      if (isZero(s_b)) {
        copy_(s_b,s_a);
        powMod_(s_b,s_r2,s_n);
        addInt_(s_b,-1);
        copy_(s_aa,s_n);
        copy_(s_d,s_b);
        GCD_(s_d,s_n);  //if s_b and s_n are relatively prime, then s_n is a prime
        if (equalsInt(s_d,1)) {
          copy_(ans,s_aa);
          return;     //if we've made it this far, then s_n is absolutely guaranteed to be prime
        }
      }
    }
  }
}

//Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.
function randBigInt(n,s) {
  var a,b;
  a=Math.floor((n-1)/bpe)+2; //# array elements to hold the BigInt with a leading 0 element
  b=int2bigInt(0,0,a);
  randBigInt_(b,n,s);
  return b;
}

//Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.
//Array b must be big enough to hold the result. Must have n>=1
function randBigInt_(b,n,s) {
  var i,a;
  for (i=0;i<b.length;i++)
    b[i]=0;
  a=Math.floor((n-1)/bpe)+1; //# array elements to hold the BigInt
  for (i=0;i<a;i++) {
    b[i]=Math.floor(Math.random()*(1<<(bpe-1)));
  }
  b[a-1] &= (2<<((n-1)%bpe))-1;
  if (s==1)
    b[a-1] |= (1<<((n-1)%bpe));
}

//Return the greatest common divisor of bigInts x and y (each with same number of elements).
function GCD(x,y) {
  var xc,yc;
  xc=dup(x);
  yc=dup(y);
  GCD_(xc,yc);
  return xc;
}

//set x to the greatest common divisor of bigInts x and y (each with same number of elements).
//y is destroyed.
function GCD_(x,y) {
  var i,xp,yp,A,B,C,D,q,sing;
  if (T.length!=x.length)
    T=dup(x);

  sing=1;
  while (sing) { //while y has nonzero elements other than y[0]
    sing=0;
    for (i=1;i<y.length;i++) //check if y has nonzero elements other than 0
      if (y[i]) {
        sing=1;
        break;
      }
    if (!sing) break; //quit when y all zero elements except possibly y[0]

    for (i=x.length;!x[i] && i>=0;i--);  //find most significant element of x
    xp=x[i];
    yp=y[i];
    A=1; B=0; C=0; D=1;
    while ((yp+C) && (yp+D)) {
      q =Math.floor((xp+A)/(yp+C));
      qp=Math.floor((xp+B)/(yp+D));
      if (q!=qp)
        break;
      t= A-q*C;   A=C;   C=t;    //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)
      t= B-q*D;   B=D;   D=t;
      t=xp-q*yp; xp=yp; yp=t;
    }
    if (B) {
      copy_(T,x);
      linComb_(x,y,A,B); //x=A*x+B*y
      linComb_(y,T,D,C); //y=D*y+C*T
    } else {
      mod_(x,y);
      copy_(T,x);
      copy_(x,y);
      copy_(y,T);
    }
  }
  if (y[0]==0)
    return;
  t=modInt(x,y[0]);
  copyInt_(x,y[0]);
  y[0]=t;
  while (y[0]) {
    x[0]%=y[0];
    t=x[0]; x[0]=y[0]; y[0]=t;
  }
}

//do x=x**(-1) mod n, for bigInts x and n.
//If no inverse exists, it sets x to zero and returns 0, else it returns 1.
//The x array must be at least as large as the n array.
function inverseMod_(x,n) {
  var k=1+2*Math.max(x.length,n.length);

  if(!(x[0]&1)  && !(n[0]&1)) {  //if both inputs are even, then inverse doesn't exist
    copyInt_(x,0);
    return 0;
  }

  if (eg_u.length!=k) {
    eg_u=new Array(k);
    eg_v=new Array(k);
    eg_A=new Array(k);
    eg_B=new Array(k);
    eg_C=new Array(k);
    eg_D=new Array(k);
  }

  copy_(eg_u,x);
  copy_(eg_v,n);
  copyInt_(eg_A,1);
  copyInt_(eg_B,0);
  copyInt_(eg_C,0);
  copyInt_(eg_D,1);
  for (;;) {
    while(!(eg_u[0]&1)) {  //while eg_u is even
      halve_(eg_u);
      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if eg_A==eg_B==0 mod 2
        halve_(eg_A);
        halve_(eg_B);
      } else {
        add_(eg_A,n);  halve_(eg_A);
        sub_(eg_B,x);  halve_(eg_B);
      }
    }

    while (!(eg_v[0]&1)) {  //while eg_v is even
      halve_(eg_v);
      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if eg_C==eg_D==0 mod 2
        halve_(eg_C);
        halve_(eg_D);
      } else {
        add_(eg_C,n);  halve_(eg_C);
        sub_(eg_D,x);  halve_(eg_D);
      }
    }

    if (!greater(eg_v,eg_u)) { //eg_v <= eg_u
      sub_(eg_u,eg_v);
      sub_(eg_A,eg_C);
      sub_(eg_B,eg_D);
    } else {                   //eg_v > eg_u
      sub_(eg_v,eg_u);
      sub_(eg_C,eg_A);
      sub_(eg_D,eg_B);
    }

    if (equalsInt(eg_u,0)) {
      if (negative(eg_C)) //make sure answer is nonnegative
        add_(eg_C,n);
      copy_(x,eg_C);

      if (!equalsInt(eg_v,1)) { //if GCD_(x,n)!=1, then there is no inverse
        copyInt_(x,0);
        return 0;
      }
      return 1;
    }
  }
}

//return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse
function inverseModInt(x,n) {
  var a=1,b=0,t;
  for (;;) {
    if (x==1) return a;
    if (x==0) return 0;
    b-=a*Math.floor(n/x);
    n%=x;

    if (n==1) return b; //to avoid negatives, change this b to n-b, and each -= to +=
    if (n==0) return 0;
    a-=b*Math.floor(x/n);
    x%=n;
  }
}

//this deprecated function is for backward compatibility only.
function inverseModInt_(x,n) {
   return inverseModInt(x,n);
}


//Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:
//     v = GCD_(x,y) = a*x-b*y
//The bigInts v, a, b, must have exactly as many elements as the larger of x and y.
function eGCD_(x,y,v,a,b) {
  var g=0;
  var k=Math.max(x.length,y.length);
  if (eg_u.length!=k) {
    eg_u=new Array(k);
    eg_A=new Array(k);
    eg_B=new Array(k);
    eg_C=new Array(k);
    eg_D=new Array(k);
  }
  while(!(x[0]&1)  && !(y[0]&1)) {  //while x and y both even
    halve_(x);
    halve_(y);
    g++;
  }
  copy_(eg_u,x);
  copy_(v,y);
  copyInt_(eg_A,1);
  copyInt_(eg_B,0);
  copyInt_(eg_C,0);
  copyInt_(eg_D,1);
  for (;;) {
    while(!(eg_u[0]&1)) {  //while u is even
      halve_(eg_u);
      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if A==B==0 mod 2
        halve_(eg_A);
        halve_(eg_B);
      } else {
        add_(eg_A,y);  halve_(eg_A);
        sub_(eg_B,x);  halve_(eg_B);
      }
    }

    while (!(v[0]&1)) {  //while v is even
      halve_(v);
      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if C==D==0 mod 2
        halve_(eg_C);
        halve_(eg_D);
      } else {
        add_(eg_C,y);  halve_(eg_C);
        sub_(eg_D,x);  halve_(eg_D);
      }
    }

    if (!greater(v,eg_u)) { //v<=u
      sub_(eg_u,v);
      sub_(eg_A,eg_C);
      sub_(eg_B,eg_D);
    } else {                //v>u
      sub_(v,eg_u);
      sub_(eg_C,eg_A);
      sub_(eg_D,eg_B);
    }
    if (equalsInt(eg_u,0)) {
      if (negative(eg_C)) {   //make sure a (C)is nonnegative
        add_(eg_C,y);
        sub_(eg_D,x);
      }
      multInt_(eg_D,-1);  ///make sure b (D) is nonnegative
      copy_(a,eg_C);
      copy_(b,eg_D);
      leftShift_(v,g);
      return;
    }
  }
}


//is bigInt x negative?
function negative(x) {
  return ((x[x.length-1]>>(bpe-1))&1);
}


//is (x << (shift*bpe)) > y?
//x and y are nonnegative bigInts
//shift is a nonnegative integer
function greaterShift(x,y,shift) {
  var i, kx=x.length, ky=y.length;
  k=((kx+shift)<ky) ? (kx+shift) : ky;
  for (i=ky-1-shift; i<kx && i>=0; i++)
    if (x[i]>0)
      return 1; //if there are nonzeros in x to the left of the first column of y, then x is bigger
  for (i=kx-1+shift; i<ky; i++)
    if (y[i]>0)
      return 0; //if there are nonzeros in y to the left of the first column of x, then x is not bigger
  for (i=k-1; i>=shift; i--)
    if      (x[i-shift]>y[i]) return 1;
    else if (x[i-shift]<y[i]) return 0;
  return 0;
}

//is x > y? (x and y both nonnegative)
function greater(x,y) {
  var i;
  var k=(x.length<y.length) ? x.length : y.length;

  for (i=x.length;i<y.length;i++)
    if (y[i])
      return 0;  //y has more digits

  for (i=y.length;i<x.length;i++)
    if (x[i])
      return 1;  //x has more digits

  for (i=k-1;i>=0;i--)
    if (x[i]>y[i])
      return 1;
    else if (x[i]<y[i])
      return 0;
  return 0;
}

//divide x by y giving quotient q and remainder r.  (q=floor(x/y),  r=x mod y).  All 4 are bigints.
//x must have at least one leading zero element.
//y must be nonzero.
//q and r must be arrays that are exactly the same length as x. (Or q can have more).
//Must have x.length >= y.length >= 2.
function divide_(x,y,q,r) {
  var kx, ky;
  var i,j,y1,y2,c,a,b;
  copy_(r,x);
  for (ky=y.length;y[ky-1]==0;ky--); //ky is number of elements in y, not including leading zeros

  //normalize: ensure the most significant element of y has its highest bit set
  b=y[ky-1];
  for (a=0; b; a++)
    b>>=1;
  a=bpe-a;  //a is how many bits to shift so that the high order bit of y is leftmost in its array element
  leftShift_(y,a);  //multiply both by 1<<a now, then divide both by that at the end
  leftShift_(r,a);

  //Rob Visser discovered a bug: the following line was originally just before the normalization.
  for (kx=r.length;r[kx-1]==0 && kx>ky;kx--); //kx is number of elements in normalized x, not including leading zeros

  copyInt_(q,0);                      // q=0
  while (!greaterShift(y,r,kx-ky)) {  // while (leftShift_(y,kx-ky) <= r) {
    subShift_(r,y,kx-ky);             //   r=r-leftShift_(y,kx-ky)
    q[kx-ky]++;                       //   q[kx-ky]++;
  }                                   // }

  for (i=kx-1; i>=ky; i--) {
    if (r[i]==y[ky-1])
      q[i-ky]=mask;
    else
      q[i-ky]=Math.floor((r[i]*radix+r[i-1])/y[ky-1]);

    //The following for(;;) loop is equivalent to the commented while loop,
    //except that the uncommented version avoids overflow.
    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0
    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])
    //    q[i-ky]--;
    for (;;) {
      y2=(ky>1 ? y[ky-2] : 0)*q[i-ky];
      c=y2>>bpe;
      y2=y2 & mask;
      y1=c+q[i-ky]*y[ky-1];
      c=y1>>bpe;
      y1=y1 & mask;

      if (c==r[i] ? y1==r[i-1] ? y2>(i>1 ? r[i-2] : 0) : y1>r[i-1] : c>r[i])
        q[i-ky]--;
      else
        break;
    }

    linCombShift_(r,y,-q[i-ky],i-ky);    //r=r-q[i-ky]*leftShift_(y,i-ky)
    if (negative(r)) {
      addShift_(r,y,i-ky);         //r=r+leftShift_(y,i-ky)
      q[i-ky]--;
    }
  }

  rightShift_(y,a);  //undo the normalization step
  rightShift_(r,a);  //undo the normalization step
}

//do carries and borrows so each element of the bigInt x fits in bpe bits.
function carry_(x) {
  var i,k,c,b;
  k=x.length;
  c=0;
  for (i=0;i<k;i++) {
    c+=x[i];
    b=0;
    if (c<0) {
      b=-(c>>bpe);
      c+=b*radix;
    }
    x[i]=c & mask;
    c=(c>>bpe)-b;
  }
}

//return x mod n for bigInt x and integer n.
function modInt(x,n) {
  var i,c=0;
  for (i=x.length-1; i>=0; i--)
    c=(c*radix+x[i])%n;
  return c;
}

//convert the integer t into a bigInt with at least the given number of bits.
//the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)
//Pad the array with leading zeros so that it has at least minSize elements.
//There will always be at least one leading 0 element.
function int2bigInt(t,bits,minSize) {
  var i,k;
  k=Math.ceil(bits/bpe)+1;
  k=minSize>k ? minSize : k;
  buff=new Array(k);
  copyInt_(buff,t);
  return buff;
}

//return the bigInt given a string representation in a given base.
//Pad the array with leading zeros so that it has at least minSize elements.
//If base=-1, then it reads in a space-separated list of array elements in decimal.
//The array will always have at least one leading zero, unless base=-1.
function str2bigInt(s,base,minSize) {
  var d, i, j, x, y, kk;
  var k=s.length;
  if (base==-1) { //comma-separated list of array elements in decimal
    x=new Array(0);
    for (;;) {
      y=new Array(x.length+1);
      for (i=0;i<x.length;i++)
        y[i+1]=x[i];
      y[0]=parseInt(s,10);
      x=y;
      d=s.indexOf(',',0);
      if (d<1)
        break;
      s=s.substring(d+1);
      if (s.length==0)
        break;
    }
    if (x.length<minSize) {
      y=new Array(minSize);
      copy_(y,x);
      return y;
    }
    return x;
  }

  x=int2bigInt(0,base*k,0);
  for (i=0;i<k;i++) {
    d=digitsStr.indexOf(s.substring(i,i+1),0);
    if (base<=36 && d>=36)  //convert lowercase to uppercase if base<=36
      d-=26;
    if (d>=base || d<0) {   //stop at first illegal character
      break;
    }
    multInt_(x,base);
    addInt_(x,d);
  }

  for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros
  k=minSize>k+1 ? minSize : k+1;
  y=new Array(k);
  kk=k<x.length ? k : x.length;
  for (i=0;i<kk;i++)
    y[i]=x[i];
  for (;i<k;i++)
    y[i]=0;
  return y;
}

//is bigint x equal to integer y?
//y must have less than bpe bits
function equalsInt(x,y) {
  var i;
  if (x[0]!=y)
    return 0;
  for (i=1;i<x.length;i++)
    if (x[i])
      return 0;
  return 1;
}

//are bigints x and y equal?
//this works even if x and y are different lengths and have arbitrarily many leading zeros
function equals(x,y) {
  var i;
  var k=x.length<y.length ? x.length : y.length;
  for (i=0;i<k;i++)
    if (x[i]!=y[i])
      return 0;
  if (x.length>y.length) {
    for (;i<x.length;i++)
      if (x[i])
        return 0;
  } else {
    for (;i<y.length;i++)
      if (y[i])
        return 0;
  }
  return 1;
}

//is the bigInt x equal to zero?
function isZero(x) {
  var i;
  for (i=0;i<x.length;i++)
    if (x[i])
      return 0;
  return 1;
}

//convert a bigInt into a string in a given base, from base 2 up to base 95.
//Base -1 prints the contents of the array representing the number.
function bigInt2str(x,base) {
  var i,t,s="";

  if (s6.length!=x.length)
    s6=dup(x);
  else
    copy_(s6,x);

  if (base==-1) { //return the list of array contents
    for (i=x.length-1;i>0;i--)
      s+=x[i]+',';
    s+=x[0];
  }
  else { //return it in the given base
    while (!isZero(s6)) {
      t=divInt_(s6,base);  //t=s6 % base; s6=floor(s6/base);
      s=digitsStr.substring(t,t+1)+s;
    }
  }
  if (s.length==0)
    s="0";
  return s;
}

//returns a duplicate of bigInt x
function dup(x) {
  var i;
  buff=new Array(x.length);
  copy_(buff,x);
  return buff;
}

//do x=y on bigInts x and y.  x must be an array at least as big as y (not counting the leading zeros in y).
function copy_(x,y) {
  var i;
  var k=x.length<y.length ? x.length : y.length;
  for (i=0;i<k;i++)
    x[i]=y[i];
  for (i=k;i<x.length;i++)
    x[i]=0;
}

//do x=y on bigInt x and integer y.
function copyInt_(x,n) {
  var i,c;
  for (c=n,i=0;i<x.length;i++) {
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x+n where x is a bigInt and n is an integer.
//x must be large enough to hold the result.
function addInt_(x,n) {
  var i,k,c,b;
  x[0]+=n;
  k=x.length;
  c=0;
  for (i=0;i<k;i++) {
    c+=x[i];
    b=0;
    if (c<0) {
      b=-(c>>bpe);
      c+=b*radix;
    }
    x[i]=c & mask;
    c=(c>>bpe)-b;
    if (!c) return; //stop carrying as soon as the carry is zero
  }
}

//right shift bigInt x by n bits.  0 <= n < bpe.
function rightShift_(x,n) {
  var i;
  var k=Math.floor(n/bpe);
  if (k) {
    for (i=0;i<x.length-k;i++) //right shift x by k elements
      x[i]=x[i+k];
    for (;i<x.length;i++)
      x[i]=0;
    n%=bpe;
  }
  for (i=0;i<x.length-1;i++) {
    x[i]=mask & ((x[i+1]<<(bpe-n)) | (x[i]>>n));
  }
  x[i]>>=n;
}

//do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement
function halve_(x) {
  var i;
  for (i=0;i<x.length-1;i++) {
    x[i]=mask & ((x[i+1]<<(bpe-1)) | (x[i]>>1));
  }
  x[i]=(x[i]>>1) | (x[i] & (radix>>1));  //most significant bit stays the same
}

//left shift bigInt x by n bits.
function leftShift_(x,n) {
  var i;
  var k=Math.floor(n/bpe);
  if (k) {
    for (i=x.length; i>=k; i--) //left shift x by k elements
      x[i]=x[i-k];
    for (;i>=0;i--)
      x[i]=0;
    n%=bpe;
  }
  if (!n)
    return;
  for (i=x.length-1;i>0;i--) {
    x[i]=mask & ((x[i]<<n) | (x[i-1]>>(bpe-n)));
  }
  x[i]=mask & (x[i]<<n);
}

//do x=x*n where x is a bigInt and n is an integer.
//x must be large enough to hold the result.
function multInt_(x,n) {
  var i,k,c,b;
  if (!n)
    return;
  k=x.length;
  c=0;
  for (i=0;i<k;i++) {
    c+=x[i]*n;
    b=0;
    if (c<0) {
      b=-(c>>bpe);
      c+=b*radix;
    }
    x[i]=c & mask;
    c=(c>>bpe)-b;
  }
}

//do x=floor(x/n) for bigInt x and integer n, and return the remainder
function divInt_(x,n) {
  var i,r=0,s;
  for (i=x.length-1;i>=0;i--) {
    s=r*radix+x[i];
    x[i]=Math.floor(s/n);
    r=s%n;
  }
  return r;
}

//do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.
//x must be large enough to hold the answer.
function linComb_(x,y,a,b) {
  var i,c,k,kk;
  k=x.length<y.length ? x.length : y.length;
  kk=x.length;
  for (c=0,i=0;i<k;i++) {
    c+=a*x[i]+b*y[i];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;i<kk;i++) {
    c+=a*x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.
//x must be large enough to hold the answer.
function linCombShift_(x,y,b,ys) {
  var i,c,k,kk;
  k=x.length<ys+y.length ? x.length : ys+y.length;
  kk=x.length;
  for (c=0,i=ys;i<k;i++) {
    c+=x[i]+b*y[i-ys];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;c && i<kk;i++) {
    c+=x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x+(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.
//x must be large enough to hold the answer.
function addShift_(x,y,ys) {
  var i,c,k,kk;
  k=x.length<ys+y.length ? x.length : ys+y.length;
  kk=x.length;
  for (c=0,i=ys;i<k;i++) {
    c+=x[i]+y[i-ys];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;c && i<kk;i++) {
    c+=x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x-(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.
//x must be large enough to hold the answer.
function subShift_(x,y,ys) {
  var i,c,k,kk;
  k=x.length<ys+y.length ? x.length : ys+y.length;
  kk=x.length;
  for (c=0,i=ys;i<k;i++) {
    c+=x[i]-y[i-ys];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;c && i<kk;i++) {
    c+=x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x-y for bigInts x and y.
//x must be large enough to hold the answer.
//negative answers will be 2s complement
function sub_(x,y) {
  var i,c,k,kk;
  k=x.length<y.length ? x.length : y.length;
  for (c=0,i=0;i<k;i++) {
    c+=x[i]-y[i];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;c && i<x.length;i++) {
    c+=x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x+y for bigInts x and y.
//x must be large enough to hold the answer.
function add_(x,y) {
  var i,c,k,kk;
  k=x.length<y.length ? x.length : y.length;
  for (c=0,i=0;i<k;i++) {
    c+=x[i]+y[i];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;c && i<x.length;i++) {
    c+=x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x*y for bigInts x and y.  This is faster when y<x.
function mult_(x,y) {
  var i;
  if (ss.length!=2*x.length)
    ss=new Array(2*x.length);
  copyInt_(ss,0);
  for (i=0;i<y.length;i++)
    if (y[i])
      linCombShift_(ss,x,y[i],i);   //ss=1*ss+y[i]*(x<<(i*bpe))
  copy_(x,ss);
}

//do x=x mod n for bigInts x and n.
function mod_(x,n) {
  if (s4.length!=x.length)
    s4=dup(x);
  else
    copy_(s4,x);
  if (s5.length!=x.length)
    s5=dup(x);
  divide_(s4,n,s5,x);  //x = remainder of s4 / n
}

//do x=x*y mod n for bigInts x,y,n.
//for greater speed, let y<x.
function multMod_(x,y,n) {
  var i;
  if (s0.length!=2*x.length)
    s0=new Array(2*x.length);
  copyInt_(s0,0);
  for (i=0;i<y.length;i++)
    if (y[i])
      linCombShift_(s0,x,y[i],i);   //s0=1*s0+y[i]*(x<<(i*bpe))
  mod_(s0,n);
  copy_(x,s0);
}

//do x=x*x mod n for bigInts x,n.
function squareMod_(x,n) {
  var i,j,d,c,kx,kn,k;
  for (kx=x.length; kx>0 && !x[kx-1]; kx--);  //ignore leading zeros in x
  k=kx>n.length ? 2*kx : 2*n.length; //k=# elements in the product, which is twice the elements in the larger of x and n
  if (s0.length!=k)
    s0=new Array(k);
  copyInt_(s0,0);
  for (i=0;i<kx;i++) {
    c=s0[2*i]+x[i]*x[i];
    s0[2*i]=c & mask;
    c>>=bpe;
    for (j=i+1;j<kx;j++) {
      c=s0[i+j]+2*x[i]*x[j]+c;
      s0[i+j]=(c & mask);
      c>>=bpe;
    }
    s0[i+kx]=c;
  }
  mod_(s0,n);
  copy_(x,s0);
}

//return x with exactly k leading zero elements
function trim(x,k) {
  var i,y;
  for (i=x.length; i>0 && !x[i-1]; i--);
  y=new Array(i+k);
  copy_(y,x);
  return y;
}

//do x=x**y mod n, where x,y,n are bigInts and ** is exponentiation.  0**0=1.
//this is faster when n is odd.  x usually needs to have as many elements as n.
function powMod_(x,y,n) {
  var k1,k2,kn,np;
  if(s7.length!=n.length)
    s7=dup(n);

  //for even modulus, use a simple square-and-multiply algorithm,
  //rather than using the more complex Montgomery algorithm.
  if ((n[0]&1)==0) {
    copy_(s7,x);
    copyInt_(x,1);
    while(!equalsInt(y,0)) {
      if (y[0]&1)
        multMod_(x,s7,n);
      divInt_(y,2);
      squareMod_(s7,n);
    }
    return;
  }

  //calculate np from n for the Montgomery multiplications
  copyInt_(s7,0);
  for (kn=n.length;kn>0 && !n[kn-1];kn--);
  np=radix-inverseModInt(modInt(n,radix),radix);
  s7[kn]=1;
  multMod_(x ,s7,n);   // x = x * 2**(kn*bp) mod n

  if (s3.length!=x.length)
    s3=dup(x);
  else
    copy_(s3,x);

  for (k1=y.length-1;k1>0 & !y[k1]; k1--);  //k1=first nonzero element of y
  if (y[k1]==0) {  //anything to the 0th power is 1
    copyInt_(x,1);
    return;
  }
  for (k2=1<<(bpe-1);k2 && !(y[k1] & k2); k2>>=1);  //k2=position of first 1 bit in y[k1]
  for (;;) {
    if (!(k2>>=1)) {  //look at next bit of y
      k1--;
      if (k1<0) {
        mont_(x,one,n,np);
        return;
      }
      k2=1<<(bpe-1);
    }
    mont_(x,x,n,np);

    if (k2 & y[k1]) //if next bit is a 1
      mont_(x,s3,n,np);
  }
}


//do x=x*y*Ri mod n for bigInts x,y,n,
//  where Ri = 2**(-kn*bpe) mod n, and kn is the
//  number of elements in the n array, not
//  counting leading zeros.
//x array must have at least as many elemnts as the n array
//It's OK if x and y are the same variable.
//must have:
//  x,y < n
//  n is odd
//  np = -(n^(-1)) mod radix
function mont_(x,y,n,np) {
  var i,j,c,ui,t,ks;
  var kn=n.length;
  var ky=y.length;

  if (sa.length!=kn)
    sa=new Array(kn);

  copyInt_(sa,0);

  for (;kn>0 && n[kn-1]==0;kn--); //ignore leading zeros of n
  for (;ky>0 && y[ky-1]==0;ky--); //ignore leading zeros of y
  ks=sa.length-1; //sa will never have more than this many nonzero elements.

  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers
  for (i=0; i<kn; i++) {
    t=sa[0]+x[i]*y[0];
    ui=((t & mask) * np) & mask;  //the inner "& mask" was needed on Safari (but not MSIE) at one time
    c=(t+ui*n[0]) >> bpe;
    t=x[i];

    //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed
    j=1;
    for (;j<ky-4;) { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }
    for (;j<ky;)   { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }
    for (;j<kn-4;) { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }
    for (;j<kn;)   { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }
    for (;j<ks;)   { c+=sa[j];                  sa[j-1]=c & mask;   c>>=bpe;   j++; }
    sa[j-1]=c & mask;
  }

  if (!greater(n,sa))
    sub_(sa,n);
  copy_(x,sa);
}


</script>

<script type="text/javascript" wassrc="100digitbigintcalculator_files/bistro.js">
// Big Integer String Operations - bistro.js ver 0.82 20121011
// Copyright (C) 2012 Alexei Kourbatov, JavaScripter.net
//
// Based in part on the public-domain BigInt.js library; see http://leemon.com/crypto/BigInt.html

// CONSTANTS:
bi_MAXINT = 9007199254740991
bi_RADIX  = 10000000
bi_RADINV = 1/bi_RADIX
bi_RADSQR = bi_RADIX*bi_RADIX
bi_LRADIX = 1000000000000000
bi_ONE    = [1,0];


function repeat(s,n) {var r=''; if (n>3000000) n=0; while(n>0) {if(n&1) r+=s; if(n>>=1) s+=s;} return r;}

function bi_trim0(s) {  // trim leading zeros from an "integer" string s
 while (s.charAt(0)=='0' && s.length>1) s=s.substring(1);
 return s;
}

function vld(s) {
 var i, s = s.toString().replace(/[^\-\d]/g,'');

 if (s.lastIndexOf('-')>0) s='-'+s.replace(/\-/g,'');
 if (!s.match(/[1-9]/)) s='0';
 else {
  if (s.charAt(0)=='0')    s=s.replace(/^0+/,'');
  if (s.substr(0,2)=='-0') s=s.replace(/^\-0+/,'-');
 }
 return s;
}

function sgn(v) { // sign of v
 if (v=='0')           return  0;
 if (v.charAt(0)=='-') return -1;
 return 1;
}

function abv(v) { // absolute value of v
 if (v.charAt(0)=='-') return v.substring(1);
 return v;
}

function bi_exp10(x1,x2) {
 var v1 = vld(x1), s1 = sgn(v1), a1 = abv(v1), L1=a1.length;
 var v2 = vld(x2), s2 = sgn(v2), a2 = abv(v2), n2=parseInt(a2,10);

 if (s1== 1 && s2==-1) return (L1<=a2?'0':    a1.substring(0,L1-a2));
 if (s1==-1 && s2==-1) return (L1<=a2?'0':'-'+a1.substring(0,L1-a2));

 if (s1!= 0 && s2==1)  return v1+repeat('0',n2);
 if (s1!= 0 && s2==0)  return v1;

 return '0';
}


// function less(v1,v2) returns true iff v1 < v2 (numerically)
// works with pre-validated "signed integer" strings v1, v2
function less(v1,v2) {
 var s1=1; if (v1=='0') s1=0; if (v1.charAt(0)=='-') s1=-1;
 var s2=1; if (v2=='0') s2=0; if (v2.charAt(0)=='-') s2=-1;

 //if (v1==v2) return false;      // equal values
 if (s1!=s2) return (s1 < s2);  // different signs
 if (s1== 1) return (v1.length < v2.length || (v1.length == v2.length && v1 < v2) ) // unequal positives
 if (s1==-1) return (v1.length > v2.length || (v1.length == v2.length && v1 > v2) ) // unequal negatives
 return false;
}


function bi_square(x) { //HAC Algorithm 14.16
 var t, uv, xi, b=[], r=[], L=x.length, M=Math.ceil(L/7);

 if (x.charAt(0)=='-') {x=abv(x); L--}
 if (L<9 && (t=x*x)<=bi_MAXINT) return t.toString();

 for (var i=0,k=L; k>0; i++,k-=7) b[i] = x.substring(k-7,k)-0;
 for (var i=2*M-1; i>=0; i--)     r[i] = 0;

 for (var i=0,k=0;i<M;i++) {
  xi = b[i];
  uv = r[k] + xi*xi;
  r[k] = uv % bi_RADIX;
  xi*= 2;
  for (var j=i+1;j<M;j++) {
   uv = r[i+j] + xi*b[j] + Math.floor(bi_RADINV*uv);
   r[i+j] = uv % bi_RADIX;
  }
  r[i+M] = Math.floor(bi_RADINV*uv);
  k+=2;
 }
 for (var i=0;i<r.length;i++) {
  if (r[i]>=bi_RADIX) {r[i+1] += Math.floor(r[i]*bi_RADINV); r[i]=r[i]%bi_RADIX;}
  r[i] = (''+(bi_RADIX+r[i])).substring(1);
 }
 return bi_trim0(r.reverse().join(''));
}


function bi_squareV(b) {
 var uv, xi, r=[], M=b.length;
 for (var i=2*M-1; i>=0; i--) r[i] = 0;
 for (var i=0,k=0;i<M;i++) {
  xi = b[i];
  uv = r[k] + xi*xi;
  r[k] = uv % bi_RADIX;
  xi*= 2;
  for (var j=i+1;j<M;j++) {
   uv = r[i+j] + xi*b[j] + Math.floor(bi_RADINV*uv);
   r[i+j] = uv % bi_RADIX;
  }
  r[i+M] = Math.floor(bi_RADINV*uv);
  k+=2;
 }
 for (var i=0;i<r.length;i++) {
  if (r[i]>=bi_RADIX) {r[i+1] += Math.floor(r[i]*bi_RADINV); r[i]=r[i]%bi_RADIX;}
 }
 return r;
}


function bi_cube(x)   { return bi_multiply(x,bi_square(x)); }
function bi_pow(x1,x2){
 var r='1', v = vld(x1), v2 = vld(x2), s2 = sgn(v2), a2 = abv(v2), len=v.length;
 var n = parseInt(a2,10), d=parseInt(a2.charAt(a2.length-1),10);

 if (s2 == 0 || v == '1' || v == '-1' && d % 2 == 0) return '1'
 if (v =='-1' && d%2 == 1) return '-1'
 if (s2 == -1 && v == '0') return 'Cannot divide by zero.'
 if (s2 == -1 || v == '0') return '0'

 if (a2.length > 6 || len==1 && n > 250000 || len>1 && n*v.length > 210000) return 'This computation would take too long.'

 while (n>0) {
  if (n & 1) r = bi_multiply(r,v);
  if (n>>=1) v = bi_square(v);
 }
 return r;
}

function bi_subtract(x1,x2) {
 var v1 = vld(x1), s1 = sgn(v1), a1 = abv(v1);
 var v2 = vld(x2), s2 = sgn(v2), a2 = abv(v2);

 if (v1==v2) return '0';
 if (s2== 0) return v1;
 if (s2 > 0) return bi_add(v1,'-'+a2);
 if (s2 < 0) return bi_add(v1,a2);
 return '0'
}


function bi_add(x1,x2) {
 var v1 = vld(x1), s1 = sgn(v1), a1 = abv(v1);
 var v2 = vld(x2), s2 = sgn(v2), a2 = abv(v2);

 if (s1==0) return v2;
 if (s2==0) return v1;

 if (s1>=0 && s2>=0)    return     bi_addU(a1,a2); // two non-negatives
 if (s1<0  && s2<0)     return '-'+bi_addU(a1,a2); // two negatives
 if (s1==-s2 && a1==a2) return '0';               // equal and opposite

 if (s1<0) {                                      // unequal opposites
  if (less(a1,a2))  return     bi_subU(a2,a1);
  else              return '-'+bi_subU(a1,a2);
 }
 if (s2<0) {
  if (less(a2,a1))  return     bi_subU(a1,a2);
  else              return '-'+bi_subU(a2,a1);
 }
 return '0'
}


function bi_addU(a1,a2) {
 var L1=a1.length, L2=a2.length, L=Math.max(L1,L2), M=Math.ceil(L/15);
 var i=0, r=[]; r[M]=0;

 for (var k=0;k<L;k+=15) {
  r[i] = (a1.substring(L1-k-15,L1-k)-0) + (a2.substring(L2-k-15,L2-k)-0);
  i++;
 }
 for (var i=0;i<M;i++) {
  if (r[i] >= bi_LRADIX) r[i+1] += 1;
  r[i] = (''+(bi_LRADIX+r[i])).substring(1);
 }
 return bi_trim0(r.reverse().join(''));
}

function bi_subU(a1,a2) {  // expected: a1>a2
 var L1=a1.length, L2=a2.length, L=Math.max(L1,L2), M=Math.ceil(L/15);
 var i=0, r = new Array(M);

 for (var k=0;k<L;k+=15) {
  r[i] = a1.substring(L1-k-15,L1-k) - a2.substring(L2-k-15,L2-k);
  i++;
 }
 for (var i=0;i<M;i++) {
  if (r[i]<0) {r[i]+=bi_LRADIX; r[i+1]-=1;} // borrow
  r[i] = (''+(bi_LRADIX+r[i])).substring(1);
 }
 return bi_trim0(r.reverse().join(''));
}


function subtractUntilLess(a1,a2) {  // expected: a1>a2>0
 var L1=a1.length, L2=a2.length, L=Math.max(L1,L2), M=Math.ceil(L/15);
 var n, k, i=0, r=[], b1=[], b2=[]; r[M]=0;

 for (var i=0,k=0;k<L;k+=15,i++) {
  b1[i] = a1.substring(L1-k-15,L1-k)-0;
  b2[i] = a2.substring(L2-k-15,L2-k)-0;
 }
 while (!less_(b1,b2)) {
  for (var i=0;i<M;i++) {
   b1[i] = b1[i] - b2[i];
   if (b1[i]<0) {b1[i]+=bi_LRADIX; b1[i+1]-=1;} // borrow
  }
 }
 for (var i=0;i<M;i++) b1[i] = (''+(bi_LRADIX+b1[i])).substring(1);
 return bi_trim0(b1.reverse().join(''));
}


function less_(x,y) { // vectors x,y
 var i, xL = x.length, yL = y.length;
 if (xL < yL) {
  for (i=xL; i<yL; i++) if (y[i]) return 1;
  for (i=xL-1;i>=0;i--) {
   if (x[i] > y[i]) return 0;
   if (x[i] < y[i]) return 1;
  }
 }
 else {
  for (i=yL; i<xL; i++) if (x[i]) return 0;
  for (i=yL-1;i>=0;i--) {
   if (x[i] > y[i]) return 0;
   if (x[i] < y[i]) return 1;
  }
 }
 return 0;
}


function bi_halve(x) {
 var r, v=vld(x), k=parseInt(v,10);
 if (Math.abs(k)<=bi_MAXINT) {
  if (k>=0) return Math.floor(k/2).toString();
  else  return (-Math.floor(-k/2)).toString();
 }
 r = bi_multiplyInt(5,v);
 return r.substring(0,r.length-1);
}


// multiply integer n < 10^14  by "integer" string x

function bi_multiplyInt(n,a) {
 var n = parseInt(n,10), m = Math.abs(n), sn = (n==0? 0:(m==n?1:-1));
 var sx=sgn(a); if(sx==-1) a=abv(a);
 var r=[], b, t, u, L=a.length, hi = Math.floor(m/bi_RADIX), lo = m % bi_RADIX;

 if (m==0 || a==0) return '0';
 if (m==1) {
  if (sn*sx == 1) return a;
  if (sn*sx ==-1) return '-'+a;
 }

 for (var i=1+Math.ceil(L/7); i>=0; i--) r[i]=0;

 if (hi==0) {
  for (var i=0,k=0; k<L; i++,k+=7) {
   t = m*a.substring(L-k-7,L-k);
   r[i] += t % bi_RADIX;
   r[i+1] += Math.floor(bi_RADINV*t);
  }
 }
 else {
  r[r.length] = 0;
  for (var i=0,k=0; k<L; i++,k+=7) {
   b = a.substring(L-k-7,L-k)-0;
   t = lo*b;
   u = hi*b;
   r[i] += t % bi_RADIX;
   r[i+1] += Math.floor(bi_RADINV*t) + u%bi_RADIX;
   r[i+2] += Math.floor(bi_RADINV*u);
  }
 }
 for (var i=0;i<r.length;i++) {
  if (r[i]>=bi_RADIX) {r[i+1] += Math.floor(bi_RADINV*r[i]); r[i]=r[i]%bi_RADIX;}
  r[i] = (''+(bi_RADIX+r[i])).substring(1);
 }
 if (sn*sx == 1) return     bi_trim0(r.reverse().join(''));
 if (sn*sx ==-1) return '-'+bi_trim0(r.reverse().join(''));
 return '0'
}


function bi_multiply(x1,x2) {
 var v1 = vld(x1), s1 = sgn(v1), a1 = abv(v1);
 var v2 = vld(x2), s2 = sgn(v2), a2 = abv(v2);

 if (s1*s2 == 1) return     multiplyAbs(a1,a2);
 if (s1*s2 ==-1) return '-'+multiplyAbs(a1,a2);
 return '0'
}


function multiplyAbs(a1,a2) {
 if (a1==0 || a2==0) return '0';

 var L1=a1.length, M1=Math.ceil(L1/7);
 var L2=a2.length, M2=Math.ceil(L2/7);
 var t, b, b2=[], r=[]  //, b1=[];

 for (var i=0,k=L2; k>0; i++,k-=7)  b2[i] = a2.substring(k-7,k)-0;
 for (var i=M1+M2-1; i>=0; i--)     r[i]  = 0;

 for (var j=0,k=L1; k>0; j++,k-=7) {
  b = a1.substring(k-7,k)-0;
  i = j+1;
  for (var l=0;l<M2;l++) {
   t = b*b2[l];
   r[j+l] += t % bi_RADIX;
   r[i+l] += Math.floor(bi_RADINV*t);
  }
 }

 for (var i=0;i<r.length;i++) {
  if (r[i]>=bi_RADIX) {r[i+1] += Math.floor(r[i]*bi_RADINV); r[i]=r[i]%bi_RADIX;}
  r[i] = (''+(bi_RADIX+r[i])).substring(1);
 }
 return bi_trim0(r.reverse().join(''));
}


function bi_divide(x1,x2) {
 var v1 = vld(x1), s1 = sgn(v1), a1 = abv(v1);
 var v2 = vld(x2), s2 = sgn(v2), a2 = abv(v2);
 var r = '0';

 if (s1*s2==1 )  r =     divideAbs(a1,a2);
 if (s1*s2==-1)  r = '-'+divideAbs(a1,a2);

 if (s2==0)   return 'Cannot divide by zero.'
 if (r=='-0') return '0';
 return r;
}

function divideAbs(a1,a2) {
 if (a2=='0')     return 'Cannot divide by zero.'
 if (a2=='1')     return a1;
 if (less(a1,a2)) return '0';
 if (a1==a2)      return '1';

 var x = bi_str2vec(a1,2);
 var y = bi_str2vec(a2,2);
 var q = new Array(x.length); // bi_copyInt_(q,0);
 var r = new Array(x.length); // bi_copyInt_(r,0);
 bi_divide_ (x,y,q,r);
 return bi_vec2str(q);
 function less(x,y) { return (x.length<y.length || x.length==y.length && x<y); }
}

function bi_mod(x1,x2) {
 var v1 = vld(x1), s1 = sgn(v1), a1 = abv(v1);
 var v2 = vld(x2), s2 = sgn(v2), a2 = abv(v2);
 var r = '0';

 if (s2==0)   return 'x mod y  is the remainder r of the division x/y; it is undefined for y = 0. \nFor x,y > 0, the quotient q and remainder r are defined by  x = qy + r,  0 \u2264 r < y.\nFor any x and nonzero y, the remainder r satisfies:  x = qy + r,  |r| < |y|.';
 if (s1>0)    r =     bi_modU(a1,a2);
 if (s1<0)    r = '-'+bi_modU(a1,a2);
 if (r=='-0') return '0';
 return r;
}


function bi_factorial(x) {
 var e, j, k, m1, m2, r = '1', q = [];
 var v = vld(x), s = sgn(v), a = abv(v), n = parseInt(a, 10);

 if (s == -1) return 'Factorial x! is not defined for negative x.'
 if (v.length > 5 || n > 12000) return 'This computation would take too long.'
 if (s == 0) return '1'
 if (a == '1') return '1'
 if (a == '2') return '2'

 if (n < 1000) {
  if (n % 3 == 0)      { r='1'; for (k=2; k < n; k+=3) r = bi_multiplyInt((k-1)*k*(k+1), r); }
  else if (n%3 == 1) { r='1'; for (k=3; k < n; k+=3) r = bi_multiplyInt((k-1)*k*(k+1), r); }
  else if (n%3 == 2) { r='2'; for (k=4; k < n; k+=3) r = bi_multiplyInt((k-1)*k*(k+1), r); }
  return r;
 }

 for (j = 0; j < 16; j++) {
  q[j] = '1';
  e = Math.floor((j+1) * n/16);

  for (k = 1 + Math.floor(j*n/16); k <= e; k += 3) {
   m1 = k+1 > e ? 1 : k+1;
   m2 = k+2 > e ? 1 : k+2;
   q[j] = bi_multiplyInt(k*m1*m2, q[j]);
  }
 }

 for (j = 0; j < 16; j+=2) q[j] = multiplyAbs(q[j],q[j+1]);
 for (j = 0; j < 8;  j+=2) q[j] = multiplyAbs(q[j],q[14-j]);

 q[0] = multiplyAbs(q[0],q[6]);
 q[4] = multiplyAbs(q[4],q[2]);

 r = multiplyAbs(q[0],q[4]);
 return r;
}


function bi_primorial(x) {
 var j, k, L, m, e, q = [], r = '1';
 var v = vld(x), s = sgn(v), a = abv(v), n = parseInt(a, 10);

 if (s == -1) return 'Primorial x# is not defined for negative x.'
 if (v.length > 6 || n > 100002) return 'This computation would take too long.'
 if (s == 0) return '1'
 if (a == '1') return '1'
 if (a == '2') return '2'

 if (n <= 10000) {
  for (k = 1; primes[k] <= n; k+=2) r = bi_multiplyInt(primes[k-1] * primes[k], r);
  if (primes[k-1] <= n) r = bi_multiplyInt(primes[k-1], r);
  return r;
 }

 for (L = 1; primes[L] <= n; L++);

 for (j = 0; j < 16; j++) {
  q[j] = '1';
  e = Math.floor((j+1)*L/16) - 1;
  for (k = Math.floor(j*L/16) ; k <= e; k+=2) {
   m = ( k+1 > e ? 1 : primes[k+1] );
   q[j] = bi_multiplyInt(primes[k] * m, q[j]);
  }
 }
 for (j = 0; j < 16; j+=2) q[j] = multiplyAbs(q[j],q[j+1]);
 for (j = 0; j < 8;  j+=2) q[j] = multiplyAbs(q[j],q[14-j]);

 q[0] = multiplyAbs(q[0],q[6]);
 q[4] = multiplyAbs(q[4],q[2]);

 r = multiplyAbs(q[0], q[4]);
 return r;
}


//return array of all primes less than integer n
function bi_findPrimes(n) {
  var i,s,p,ans;
  s=new Array(n);
  for (i=1;i<n;i++) s[i]=0;
  s[0]=2;
  p=0;    //first p elements of s are primes, the rest are a sieve
  for(;s[p]<n;) {                           // s[p] is the pth prime
    for(i=s[p]*s[p]; i<n; i+=s[p]) s[i]=1;  // mark multiples of s[p]
    p++;
    s[p]=s[p-1]+1;
    for(; s[p]<n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)
  }
  ans=new Array(p);
  for(i=0;i<p;i++)
    ans[i]=s[i];
  return ans;
}

primes = bi_findPrimes(100000);


function bi_odd(r)  { if (typeof r=='number') return(r%2==1); return ('13579'.indexOf(r.charAt(r.length-1)) != -1) }
function bi_even(r) { if (typeof r=='number') return(r%2==0); return ('02468'.indexOf(r.charAt(r.length-1)) != -1) }

function divisibleBy3or5or7or11or13(r) {
 var s, s0=0, s1=0, s2=0, s3=0, s4=0, s5=0, len=r.length, d=r.charAt(len-1);
 if (d==5 || d==0) return 1;

 for (var k=len-1; k>=0; k-=6) {
  s0 -= r.charAt(k)  ; s1 -= r.charAt(k-1); s2 -= r.charAt(k-2);
  s3 -= r.charAt(k-3); s4 -= r.charAt(k-4); s5 -= r.charAt(k-5);
 }
 if ((s0+s1+s2+s3+s4+s5) % 3==0)   return 1;
 s = s3-s0+10*(s4-s1)+100*(s5-s2);
 if (s%7==0 || s%11==0 || s%13==0) return 1;
 return 0;
}

// GCD-related code - based in part on HAC ch14 and BigInt.js

function bi_LCM(x1,x2) {
 var v1 = vld(x1), s1 = sgn(v1), a1 = abv(v1);
 var v2 = vld(x2), s2 = sgn(v2), a2 = abv(v2);

 if (s1*s2==0) return 'LCM(x,y) is the least common multiple of x and y. \nLCM(x,y) is not defined for zero input.'

 var gcd = bi_GCD(a1,a2);
 if (gcd=='1') return multiplyAbs(a1,a2);

 return divideAbs (multiplyAbs(a1,a2), gcd);
}

function bi_linComb_(x,y,a,b) {  // assuming x >= y >= 0, let x = ax+by
  var i, c=0, xL=x.length, yL=y.length, k=Math.min(xL, yL);

  for (i=0;i<k;i++) {
    c  += a*x[i] + b*y[i];
    x[i]= c % bi_RADIX;
    c   = Math.floor(c*bi_RADINV);
  }
  for (i=k;i<xL;i++) {
    c  += a*x[i];
    x[i]= c % bi_RADIX;
    c   = Math.floor(c*bi_RADINV);
  }
}

// bi_str2vec creates and returns a new vector with elements determined by s
// if len is not supplied, the vector's length will be as needed to fit s, plus one high-order zero element

function bi_str2vec(s,len) {
 var v=[], i=0, k;
 if (s.charAt(0)=='-') s=s.substring(1);
 for (k=s.length; k>0; k-=7) v[i++] = s.substring(k-7,k)-0;
 v[i++]=0;
 if (len != null) while (i<len) v[i++]=0;
 return v;
}

function bi_str2vec_(s,v) { // re-populates an existing vector v
 var i,k;
 if (s.charAt(0)=='-') s=s.substring(1);
 for (i=0,k=s.length; k>0; k-=7,i++) v[i] = s.substring(k-7,k)-0;
 while (i<v.length) {v[i]=0; i++}
}

function bi_vec2str(v) {
 var r=[];
 for (var i=0;i<v.length;i++) {
  if (v[i]>=bi_RADIX) {v[i+1] += Math.floor(v[i]*bi_RADINV); v[i]=v[i]%bi_RADIX;}
  r[i] = (''+(bi_RADIX+v[i])).substring(1);
 }
 return bi_trim0(r.reverse().join(''));
}

//returns a duplicate of bigInt x
function bi_dup(x) {
  var buff=new Array(x.length);
  bi_copy_(buff,x);
  return buff;
}

//do x=y on bigInts x and y.  x must be an array at least as big as y (not counting the leading zeros in y).
function bi_copy_(x,y) {
 var i, xL = x.length, k = Math.min(xL, y.length);
 for (i=0; i<k; i++) x[i]=y[i];
 for (i=k; i<xL;i++) x[i]=0;
}

function bi_copyInt_(x,n) {
 x[0] = n%bi_RADIX;
 x[1] = Math.floor(n*bi_RADINV);
 for (var i=x.length-1; i>1; i--) x[i]=0;
}

function bi_GCD(x1,x2) {  // "integer" strings x1,x2
 var x1 = vld(x1), s1 = sgn(x1), a1 = abv(x1), v1=bi_str2vec(a1);
 var x2 = vld(x2), s2 = sgn(x2), a2 = abv(x2), v2=bi_str2vec(a2);

 if (s1*s2==0) return 'GCD(x,y) is the greatest common divisor of x and y. \nGCD(x,y) is not defined for zero input.'
 if (a1.length<a2.length || a1.length==a2.length && a1<a2) {
  bi_GCD_(v2,v1);
  return bi_vec2str(v2);
 }
 bi_GCD_(v1,v2);
 return bi_vec2str(v1);
}

// Set x to the greatest common divisor of vectors x and y; y is destroyed.
// This is an implementation of the classical Euclidean algorithm.
function bi_GCD_(x, y) {
 var t=0, T = bi_dup(x);
 while (y[1] || bi_hod(y)) { // while y[i]!=0 for some i>0
  bi_mod_(x, y);
  bi_copy_(T, x);
  bi_copy_(x, y);
  bi_copy_(y, T);
 }
 if (y[0] == 0) return;
 t = bi_modIntV(x, y[0]);
 bi_copyInt_(x, y[0]);
 y[0] = t;
 while (y[0]) { t = x[0] % y[0]; x[0] = y[0]; y[0] = t; }
}


function bi_modIntV(v,n) {  // a vector v and a number n<10000000, both positive
 var c=1, r=0;
 for (var i=0; i<v.length; i++) {
  r = (r+c*v[i])%n;
  c = (c*bi_RADIX)%n;
 }
 return r;
}

// bi_mod_ called from bi_GCD_
function bi_mod_(x,y) { // input vectors x,y; result returned in x
 var q = new Array(x.length); //bi_copyInt_(q,0);
 var r = new Array(x.length); //bi_copyInt_(r,0);
 bi_divide_ (x,y,q,r)
 bi_copy_(x,r);
}

function bi_sqrmod(v1,v2) { // unsigned "integer" strings v1,v2
 var m, a1 = abv(v1), a2 = abv(v2), n1=parseInt(a1,10), n2=parseInt(a2,10);

 if (a2==0) return 'Cannot divide by zero.'

 if (n1*n1 <= bi_MAXINT) {
  if (n2 <= bi_MAXINT) return ((n1*n1)%n2).toString();
  else                 return (n1*n1).toString();
 }
 if (2*a1.length < a2.length) return bi_square(a1);

 m = bi_square( bi_modU(a1, a2) );
 return bi_modU(m, a2);
}


function bi_modU(a1,a2) { // unsigned "integer" strings
 var L1=a1.length, k=a2.length, c=1, r=0, b, d, n2;
 if (a2==0)       return 'Cannot divide by zero.'
 if (less(a1,a2)) return a1;
 if (a1==a2)      return '0';
 if (k < 15) {
  n2 = 1*a2;
  for (var i=0; i<L1; i++) { r = (r+c*a1.charAt(L1-i-1))%n2; c = (c*10)%n2; }
  return r.toString();
 }
 if (a1.length <= k+1) {
  r = subtractUntilLess(a1,a2);
  return r;
 }
 var x = bi_str2vec(a1,2);
 var y = bi_str2vec(a2,2);
 var q = new Array(x.length); //bi_copyInt_(q,0);
 var r = new Array(x.length); //bi_copyInt_(r,0);
 bi_divide_ (x,y,q,r)
 return bi_vec2str(r);
}

function bi_divide_ (x,y,q,r) {  // modified HAC Algorithm 14.20 taking advantage of FPU
 var i,j,n,t,d,qj;
 if (bi_zero(y)) return;  // 'Cannot divide by zero.'

 if (bi_equalV(x,y))        { bi_copyInt_(q,1); bi_copyInt_(r,0); return; }
 if (bi_hod(y)==0 && y[0]==1) { bi_copy_(q,x); bi_copyInt_(r,0); return; }

 bi_copyInt_(q,0);
 bi_copy_(r,x);

 if (less_(x,y)) return;

 n=bi_hod(x); // n = index of x's most significant "digit"
 t=bi_hod(y); // t = index of y's most significant "digit"

 r[-1] = 0; r[-2] = 0; y[-1] = 0;

 d = 1.0 / (bi_RADIX*y[t] + y[t-1]);

 j = n-t;
 qj = Math.floor((bi_RADIX*r[n] + r[n-1] + bi_RADINV*r[n-2]) * d);
 if (qj>=bi_RADIX) qj=bi_RADIX-1;

 if (qj) bi_linCombShift_(r,y,-qj,j);

 while (bi_negativeOrNaN(r)) { qj--; bi_copy_(r,x); bi_linCombShift_(r,y,-qj,j);}
 while (!bi_less_shf(r,y,j)) { qj++; bi_subShift_(r,y,j); }
 q[j]=qj;

 for (i=n;i>t;i--) {
  j=i-t-1;
  qj = Math.floor((bi_RADSQR*r[i] + bi_RADIX*r[i-1] + r[i-2]) * d);
  if (qj>=bi_RADIX) qj=bi_RADIX-1;

  bi_linCombShift_(r,y,-qj,j);
  if (isNaN(r[r.length-1]) || r[r.length-1]<0) {
   bi_addShift_(r,y,j); qj--;
  }
  q[j]=qj;
 }
 delete r[-1]; delete r[-2]; delete y[-1];
}

function bi_addShift_(x,y,ys) {
  var i,c,k,xL=x.length,yL=y.length,k=Math.min(xL,yL+ys);

  for (c=0,i=ys;i<k;i++) {
    c+=x[i]+y[i-ys];
    x[i]=c%bi_RADIX;
    c=Math.floor(c*bi_RADINV);
  }
  for (i=k; c && i<xL; i++) {
    c+=x[i];
    x[i]=c%bi_RADIX;
    c=Math.floor(c*bi_RADINV);
  }
}

function bi_subShift_(x,y,ys) { // x,y nonnegative;
 var i,c,xL=x.length,yL=y.length,k=Math.min(xL,yL+ys);

 for (c=0,i=ys;i<k;i++) {
  c+=x[i]-y[i-ys];
  if (c<0) {c+bi_RADIX; x[i+1]--;}
  x[i]=c%bi_RADIX;
  c=Math.floor(c*bi_RADINV);
 }
 for (i=k; c && i<xL; i++) {
  c+=x[i];
  if (c<0) {c+bi_RADIX; x[i+1]--;}
  x[i]=c%bi_RADIX;
  c=Math.floor(c*bi_RADINV);
 }
 // For negatives only: must go on borrowing
 for ( ;x[i]<0 && i<xL-1; i++) { x[i]+=bi_RADIX; x[i+1]--; }
}

function bi_less_shf(x,y,ys) { // x,y nonnegative; y not zero; returns (x < y*RADIX^ys)
  var i, xL=x.length, yL=y.length, k=(xL<yL+ys?xL:yL+ys);  //k=Math.min(xL,yL+ys);

  for (i=k;    i<xL; i++) if (x[i]>0) return 0;
  for (i=k-ys; i<yL; i++) if (y[i]>0) return 1;
  for (i=k-1; i>=ys; i--) {
    if (x[i]>y[i-ys]) return 0;
    if (x[i]<y[i-ys]) return 1;
  }
  return 0;
}

function bi_linCombShift_(x,y,b,ys) {  // let x = x + b*y*RADIX^ys
 var i, j, c=0, xL=x.length, yL=y.length, k=Math.min(xL,yL+ys);

 for (i=ys;i<k;i++) {
  c+=x[i]+b*y[i-ys];
  if (c<0) {j=Math.ceil(-c*bi_RADINV); c+=j*bi_RADIX; x[i+1]-=j;}
  x[i]=c%bi_RADIX;
  c=Math.floor(c*bi_RADINV);
 }
 for (i=k;c && i<xL;i++) {
  c+=x[i];
  if (c<0) {j=Math.ceil(-c*bi_RADINV); c+=j*bi_RADIX; x[i+1]-=j;}
  x[i]=c%bi_RADIX;
  c=Math.floor(c*bi_RADINV);
 }
 // For negatives only: must go on borrowing
 for ( ;x[i]<0 && i<xL-1; i++) { x[i]+=bi_RADIX; x[i+1]--; }
}

function bi_zero(x) {
 for (var i=x.length-1;i>=0;i--) if (x[i]) return 0;
 return 1;
}

function bi_negative(x) {
 if (x[x.length-1]<0) return 1;
 return 0;
}

function bi_negativeOrNaN(x) {
 if (isNaN(x[x.length-1]) || x[x.length-1]<0) return 1;
 return 0;
}

function bi_equalV(x,y) { // vectors x,y
  var i, xL=x.length, yL=y.length, k=(xL<yL?xL:yL);
  for (i=0;i<k;i++) if (x[i]!=y[i]) return 0;
  if (xL>yL) { for (;i<xL;i++) if (x[i]) return 0;}
  else       { for (;i<yL;i++) if (y[i]) return 0;}
  return 1;
}

function bi_hod(x) { // the high-order digit (most significant element) of x
 for (var i=x.length-1;i>0;i--) if (x[i]) return i;
 return 0;
}

//--------------------------------------------------------------------
// Below is most of the Miller-Rabin-related code


function bi_millerRabinInt (n,a) {  // n string, a integer
 var k=n.length-1, d = parseInt(n.charAt(k));

 // Enforce MR test's precondition: large odd positive n
 if (n.charAt(0)=='-')          return 0; // input is negative
 if (isNaN(d) || k>0 && d%2==0) return 0; // NaN or even, not prime

 if (k<=0) {                              // single digits:
   if  (d==2||d==3||d==5||d==7) return 1; // 2,3,5,7 are primes
   else                         return 0; // others are not
 }
 var v = bi_str2vec(n);
 var mr_a=bi_dup(v);
 bi_copyInt_(mr_a,a);
 return bi_millerRabinV(v,mr_a);
}


function bi_millerRabin (n,a) {     // n,a both strings
 var k=n.length-1, d = parseInt(n.charAt(k));

 // Enforce MR test's precondition: large odd positive n
 if (n.charAt(0)=='-')          return 0; // input is negative
 if (isNaN(d) || k>0 && d%2==0) return 0; // NaN or even, not prime

 if (k<=0) {                              // single digits:
   if  (d==2||d==3||d==5||d==7) return 1; // 2,3,5,7 are primes
   else                         return 0; // others are not
 }

 var s = n.toString();
 var v = bi_str2vec(s);
 var b = bi_str2vec(a);

 return bi_millerRabinV (v,b);
}


function bi_millerRabinIntV(x,b) {  //x vector, b integer, with b<x
  var mr_a=bi_dup(x);
  bi_copyInt_(mr_a,b);
  return bi_millerRabinV(x,mr_a);
}


function bi_millerRabinV(x,b) {    // x,b are vectors, with b<x
  var i,j,k,s, mr_x1, mr_r, mr_a;

  mr_r = bi_trimV(x,0);
  mr_a = bi_dup(mr_r);
  bi_copy_(mr_a,b);
  bi_addInt_(mr_r,-1);
  mr_x1=bi_dup(mr_r);

  if (bi_zero(mr_r)) return 0;   // input x was 1!

  //s=the highest power of two that divides mr_r
  s=0; while (0==bi_divInt_(mr_r,2)) s++;
  if (!s) return 0;              // input x was even!

  bi_multInt_(mr_r,2); mr_r[0]++;   // mr_r = mr_r*2 + 1
  bi_powMod_(mr_a,mr_r,x);

  if (!bi_equalsInt(mr_a,1) && !bi_equalV(mr_a,mr_x1)) {
    j=1;
    while (j<=s-1 && !bi_equalV(mr_a,mr_x1)) {
      bi_squareMod_(mr_a,x);
      if (bi_equalsInt(mr_a,1)) {
        return 0;
      }
      j++;
    }
    if (!bi_equalV(mr_a,mr_x1)) {
      return 0;
    }
  }
  return 1;
}

//do x=x**y mod n, where x,y,n are bigInts and ** is exponentiation.  0**0=1.
//this is faster when n is odd.  x usually needs to have as many elements as n.
function bi_powMod_(x,y,n) {
  var i,k1,k2,kn,np,bits=[];
  var s7=bi_dup(n);
  var yc=bi_dup(y);

  // For an even modulus or (for radix 10^k) a modulus divisible by 5,
  // the radix and modulus are not necessarily coprime.
  // Therefore we cannot use the faster Montgomery algorithm,
  // so we use a simple square-and-multiply algorithm.

  if ((n[0]&1)==0 || n[0]%5==0) {
    bi_copy_(s7,x);
    bi_copyInt_(x,1);
    while(!bi_equalsInt(yc,0)) {
      if (yc[0]&1)
        bi_multMod_(x,s7,n);
      bi_divInt_(yc,2);
      bi_squareMod_(s7,n);
    }
    return;
  }

  //calculate np from n for the Montgomery multiplications
  bi_copyInt_(s7,0);
  for (kn=n.length; kn>0 && !n[kn-1]; kn--);

  var m = bi_modInt(n,bi_RADIX);
  var i = bi_invModInt(m,bi_RADIX);  // this i may be negative

  if (i<0)        i+=bi_RADIX*Math.ceil(-i/bi_RADIX);
  if (i>bi_RADIX) i-=bi_RADIX*Math.floor(i/bi_RADIX);

  np=bi_RADIX-i;

  s7[kn]=1;
  bi_multMod_(x,s7,n);   // x = x * RADIX**(kn) mod n

  var s3=bi_dup(x);
  k1 = bi_hod(y);     // k1 = the high-order digit element of y
  if (y[k1]==0) {     //anything to the 0th power is 1
    bi_copyInt_(x,1);
    return;
  }

  // Algorithm 14.94 (HAC)

  var i=0;  while(!bi_equalsInt(yc,0)) bits[i++] = bi_divInt_(yc,2);
  for (i=bits.length-1; i>0; i--) {
   bi_mont_(x,x,n,np);
   if (bits[i-1]) bi_mont_(x,s3,n,np);
  }
  bi_mont_(x,bi_ONE,n,np);
  return;
}

// do x=x*y*Ri mod n for bigInts x,y,n,
//  where Ri = radix**(-kn) mod n, and kn is the
//  number of elements in the n array, not
//  counting leading zeros.
// x array must have at least as many elemnts as the n array
// It's OK if x and y are the same variable.
// must have:
//  x,y < n
//  n is odd
//  np = -(n^(-1)) mod radix

sa = new Array(0); // scratchpad array (global for speed)

function bi_mont_(x,y,n,np) {
  var i,j,c,ui,t,ks,ky4,kn4;
  var kn=n.length;
  var ky=y.length;

  for (;kn>0 && n[kn-1]==0;kn--); //ignore leading zeros of n
  for (;ky>0 && y[ky-1]==0;ky--); //ignore leading zeros of y

  ky4 = ky-4;
  kn4 = kn-4;

  if (sa.length!=kn)
    sa=new Array(kn);

  bi_copyInt_(sa,0);

  ks=sa.length-1; //sa will never have more than this many nonzero elements.

  //the following loop consumes 95% of runtime for large numbers
  for (i=0; i<kn; i++) {
    t=sa[0]+x[i]*y[0];
    ui=((t % bi_RADIX) * np) % bi_RADIX;
    c = Math.floor((t+ui*n[0])*bi_RADINV);
    t=x[i];

    //do sa=(sa+x[i]*y+ui*n)/b  where b=10000000.  Loop is unrolled 5-fold for speed
    j=1;

    for (;j<ky4;)  { c+=sa[j]+ui*n[j]+t*y[j]; sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++;
                     c+=sa[j]+ui*n[j]+t*y[j]; sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++;
                     c+=sa[j]+ui*n[j]+t*y[j]; sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++;
                     c+=sa[j]+ui*n[j]+t*y[j]; sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++;
                     c+=sa[j]+ui*n[j]+t*y[j]; sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++; }
    for (;j<ky;)   { c+=sa[j]+ui*n[j]+t*y[j]; sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++; }
    for (;j<kn4;)  { c+=sa[j]+ui*n[j];        sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++;
                     c+=sa[j]+ui*n[j];        sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++;
                     c+=sa[j]+ui*n[j];        sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++;
                     c+=sa[j]+ui*n[j];        sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++;
                     c+=sa[j]+ui*n[j];        sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++; }
    for (;j<kn;)   { c+=sa[j]+ui*n[j];        sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++; }
    for (;j<ks;)   { c+=sa[j];                sa[j-1]=c % bi_RADIX; c=Math.floor(c*bi_RADINV); j++; }
    sa[j-1]=c % bi_RADIX;
  }

  if (!bi_greater(n,sa)) bi_sub_(sa,n);
  bi_copy_(x,sa);
}


function bi_equalsInt(x,y) {
  if (x[0]!=y) return 0;
  for (var i=1;i<x.length;i++) if (x[i]) return 0;
  return 1;
}


//return x**(-1) mod n, for integers x and n. Return 0 if there is no inverse
function bi_invModInt(x,n) {
  var a=1,b=0;
  for (;;) {
    if (x==1) return a;
    if (x==0) return 0;
    b-=a*Math.floor(n/x);
    n%=x;

    if (n==1) return b;
    if (n==0) return 0;
    a-=b*Math.floor(x/n);
    x%=n;
  }
}

//is x > y? (x and y both nonnegative)
function bi_greater(x,y) {
  var i;
  var k=Math.min(x.length,y.length);

  for (i=x.length;i<y.length;i++) if (y[i]) return 0;  //y has more digits
  for (i=y.length;i<x.length;i++) if (x[i]) return 1;  //x has more digits

  for (i=k-1;i>=0;i--)
    if (x[i]>y[i])      return 1;
    else if (x[i]<y[i]) return 0;
  return 0;
}


function bi_sub_(x,y) {
 var i,j,c,k=Math.min(x.length,y.length);

 for (c=0,i=0;i<k;i++) {
  c+=x[i]-y[i];
  if (c<0) {j=Math.ceil(-c*bi_RADINV); c+=j*bi_RADIX; x[i+1]-=j;}
  x[i]=c % bi_RADIX;
  c = Math.floor(c*bi_RADINV);
 }
 for (i=k;c && i<x.length;i++) {
  c+=x[i];
  x[i]=c % bi_RADIX;
  c = Math.floor(c*bi_RADINV);
 }
 // For negatives only: must go on borrowing
 for ( ;x[i]<0 && i<k-1; i++) { x[i]+=bi_RADIX; x[i+1]--; }
}

//do x=x*y mod n for bigInts x,y,n.
//for greater speed, let y<x.
function bi_multMod_(x,y,n) {
  var i, s0=new Array(2*x.length);
  bi_copyInt_(s0,0);
  for (i=0;i<y.length;i++)
    if (y[i])
      bi_linCombShift_(s0,x,y[i],i);
  bi_mod_(s0,n);
  bi_copy_(x,s0);
}

//do x=x*x mod n for bigInts x,n.
function bi_squareMod_(x,n) {
  var i,j,c,kx,k,xi,m=0;
  for (kx=x.length; kx>0 && !x[kx-1]; kx--);  //ignore leading zeros in x
  k=kx>n.length ? 2*kx : 2*n.length; //k elements in the product, twice as many as in the larger of x and n

  var s0=new Array(k);
  bi_copyInt_(s0,0);
  for (i=0;i<kx;i++) {
    xi = x[i];
    c=s0[m]+xi*xi;
    s0[m]=c % bi_RADIX;
    c=Math.floor(c*bi_RADINV);
    xi += xi;
    for (j=i+1;j<kx;j++) {
      c=s0[i+j]+xi*x[j]+c;
      s0[i+j]=c % bi_RADIX;
      c=Math.floor(c*bi_RADINV);
    }
    s0[i+kx]=c;
    m+=2;
  }
  bi_mod_(s0,n);
  bi_copy_(x,s0);
}


//return x with exactly k leading zero elements
function bi_trimV(x,k) {
 var i,y;
 for (i=x.length; i>0 && !x[i-1]; i--);
 y=new Array(i+k);
 bi_copy_(y,x);
 return y;
}

function bi_multInt_(x,n) {
 var i, j, c=0, k=x.length;
 if (!n) return;

 for (i=0;i<k;i++) {
  c+=x[i]*n;
  if (c<0) {j=Math.ceil(-c*bi_RADINV); c+=j*bi_RADIX; x[i+1]-=j;}
  x[i]=c%bi_RADIX;
  c=Math.floor(c*bi_RADINV);
 }
}

function bi_addInt_(x,n) {
 var i, j, c=n, k=x.length;

 for (i=0; c && i<k;i++) {
  c+=x[i];
  if (c<0) {j=Math.ceil(-c*bi_RADINV); c+=j*bi_RADIX; x[i+1]-=j;}
  x[i]=c%bi_RADIX;
  c=Math.floor(c*bi_RADINV);
 }
 // For negatives only: must go on borrowing
 for ( ;x[i]<0 && i<k-1; i++) { x[i]+=bi_RADIX; x[i+1]--; }
}

function bi_divInt_(x,n) {
 var i,r=0,s;
 for (i=x.length-1;i>=0;i--) {
  s=r*bi_RADIX+x[i];
  x[i]=Math.floor(s/n);
  r=s%n;
 }
 return r;
}

//return x mod n (vector x, integer n)
function bi_modInt(x,n) {
 var i,c=0;
 for (i=x.length-1; i>=0; i--) c=(c*bi_RADIX+x[i])%n;
 return c;
}


//-----------------------------------------------------

// Higher-level functions using the Miller-Rabin test


function bi_isPrimeMR(n) {
 var a, s = vld(n);
 var smallPrimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113];

 if (less(n,'2'))  return 0;
 if (s.length>500) return 'Primality check will take too long.'

 for (var k=0;k<smallPrimes.length;k++) {
  a = smallPrimes[k];
  if (s==a+'') return 1;
  if (bi_millerRabinInt(s,a)==0) return 0;
 }
 return 1;
}

function bi_nextPrimeMR(n) {
 var r, s = vld(n), f=parseFloat(s);
 var len=s.length, d=parseInt(s.charAt(len-1),10);
 if (less(s,'2')) return '2'
 if (f<3)  return '3'
 if (f<5)  return '5'
 if (f<7)  return '7'
 if (f<11) return '11'
 if (f<13) return '13'

 if (s.length>500) return 'Primality check will take too long.'

 if (d%2) r = bi_addU(s,'2');
 else     r = bi_addU(s,'1');

 while (divisibleBy3or5or7or11or13(r) || !bi_isPrimeMR(r)) {
  if (r.charAt(r.length-1)==3) r=bi_addU(r,'4');
  else                         r=bi_addU(r,'2');
 }
 return r;
}

function bi_prevPrimeMR(n) {
 var r, s = vld(n), f=parseFloat(s);
 var len=s.length, d=parseInt(s.charAt(len-1),10);

 if (s.charAt(0)=='-'
  || f<=2)  return 'There are no primes less than 2.'
 if (f<=3)  return '2'
 if (f<=5)  return '3'
 if (f<=7)  return '5'
 if (f<=11) return '7'
 if (f<=13) return '11'
 if (f<=17) return '13'

 if (s.length>500) return 'Primality check will take too long.'

 if (d%2) r = bi_subU(s,'2');
 else     r = bi_subU(s,'1');

 while (divisibleBy3or5or7or11or13(r) || !bi_isPrimeMR(r)) {
  if (r.charAt(r.length-1)==7) r=bi_subU(r,'4');
  else                         r=bi_subU(r,'2');
 }
 return r;
}


//----------------------------------------------------------------
// FIX 20121008 - call BigInt.js with the fix described at
// www.javascripter.net/math/primes/millerrabinbug-bigint54.htm

function bin_millerRabin (n,a) {          // n,a both strings
 var k=n.length-1, d = parseInt(n.charAt(k));

 // Enforce MR test's precondition: large odd positive n
 if (n.charAt(0)=='-')          return 0; // input is negative
 if (isNaN(d) || k>0 && d%2==0) return 0; // NaN or even, not prime

 if (k<=0) {                              // single digits:
   if  (d==2||d==3||d==5||d==7) return 1; // 2,3,5,7 are primes
   else                         return 0; // others are not
 }

 var s = n.toString(), len=s.length;
 var v = str2bigInt(s, 10, len);
 var b = str2bigInt(a, 10, len);

 return millerRabin (v,b); // uses BigInt.js millerRabin
}


function isPrimeMR(n) {
 var smallPrimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113];
 var a, b, s = vld(n), len=s.length, f=parseFloat(s);

 if (s.charAt(0)=='-' || f<2) return 0;

 b = str2bigInt(s,10,len);

 for (var k=0;k<30;k++) {
  a = smallPrimes[k];
  if (s==''+a) return 1;
  if (millerRabinInt(b,a)==0) return 0;
 }
 return 1;
}

function nextPrimeMR(n) {
 var r, s = vld(n), f=parseFloat(s);
 var len=s.length, d=parseInt(s.charAt(len-1),10);
 if (less(s,'2')) return '2'
 if (f<3)  return '3'
 if (f<5)  return '5'
 if (f<7)  return '7'
 if (f<11) return '11'
 if (f<13) return '13'

 if (s.length>500) return 'Primality check will take too long.'

 if (d%2) r = bi_addU(s,'2');
 else     r = bi_addU(s,'1');

 while (divisibleBy3or5or7or11or13(r) || !isPrimeMR(r)) {
  if (r.charAt(r.length-1)==3) r=bi_addU(r,'4');
  else                         r=bi_addU(r,'2');
 }
 return r;
}

function prevPrimeMR(n) {
 var r, s = vld(n), f=parseFloat(s);
 var len=s.length, d=parseInt(s.charAt(len-1),10);

 if (s.charAt(0)=='-'
  || f<=2)  return 'There are no primes less than 2.'
 if (f<=3)  return '2'
 if (f<=5)  return '3'
 if (f<=7)  return '5'
 if (f<=11) return '7'
 if (f<=13) return '11'
 if (f<=17) return '13'

 if (s.length>500) return 'Primality check will take too long.'

 if (d%2) r = bi_subU(s,'2');
 else     r = bi_subU(s,'1');

 while (divisibleBy3or5or7or11or13(r) || !isPrimeMR(r)) {
  if (r.charAt(r.length-1)==7) r=bi_subU(r,'4');
  else                         r=bi_subU(r,'2');
 }
 return r;
}



</script>

<script type="text/javascript" wassrc="100digitbigintcalculator_files/keyevents.js">
// The onkeypress event handler is called to:
// (1) allow digits only in INPUT fields
// (2) allow Enter, Backspace, etc in INPUT fields

function keypressHandler(e,id) {
 var chrTyped, chrCode=0, tgt='', evt=e?e:event;
 if (evt.charCode!=null)     chrCode = evt.charCode;
 else if (evt.which!=null)   chrCode = evt.which;
 else if (evt.keyCode!=null) chrCode = evt.keyCode;

 if (chrCode==0) chrTyped = 'SPECIAL KEY';
 else chrTyped = String.fromCharCode(chrCode);

 if ( evt.target   && evt.target.tagName ) tgt = evt.target.tagName.toLowerCase();
 else if ( evt.srcElement && evt.srcElement.tagName) tgt = evt.srcElement.tagName.toLowerCase();

 if ( tgt=="input" || tgt=="textarea")
 {
  //Digits, special keys & backspace [\b] work as usual:
  if (chrTyped.match(/\d|[\b]|\-|SPECIAL/)) return true;
  if (evt.altKey || evt.ctrlKey || chrCode<21) return true;

  //Any other input? Prevent the default response:
  if (evt.preventDefault) evt.preventDefault();
  evt.returnValue=false;
  return false;
 }
 return true;
}


// keydownHandler disallows Backspace when not using an INPUT or TEXTAREA field

function keydownHandler(e) {
 var elem, tgt='', evt = e ? e:event;
 if (evt.srcElement)  elem = evt.srcElement;
 else if (evt.target) elem = evt.target;
 tgt = elem.tagName.toString().toLowerCase();

 // Cancel BACKSPACE (keyCode 8) as navigation key!
 if (evt.keyCode==8 && tgt!='input' && tgt!='textarea') return false;
 return true;
}

document.onkeydown=keydownHandler;
</script>

<script type="text/javascript">
function clearAnsDigits() {  document.getElementById('nAnsDigits').innerHTML = '&nbsp;'; }
function showAnsDigits()  {
 var n = document.forms[0].elements['aa'].value.length;
 var c = document.forms[0].elements['aa'].value.charAt(0);

 if ( c=='-') n--;
 if ( c.match(/[0-9\-]/) ) document.getElementById('nAnsDigits').innerHTML = n+(n==1?' digit':' digits');
 else clearAnsDigits();
}
function showPrimality() {
 var c = document.forms[0].elements['aa'].value.charAt(0);
 if      (c=='1') document.getElementById('nAnsDigits').innerHTML = 'x is prime';
 else if (c=='0') document.getElementById('nAnsDigits').innerHTML = 'x is not prime';
 else clearAnsDigits();
}

function recordPrevAns() {
 if ((tmp=vld(document.forms[0].elements['aa'].value))!=0) prevans=tmp;
}
mem='0';
prevans='0';

</script>


<!--
TEXTAREA  {
 font-family : Arial, Helvetica, sans-serif;
 font-size   : 10pt;
 width       : 496px;
 min-width   : 496px;
 max-width   : 496px;
 overflow    : auto;
}

-->

<style type="text/css">
FORM  {
 font-family : Arial, Helvetica, sans-serif;
 font-size   : 10pt;
 margin      : 0px;
 padding     : 1px;
}

TEXTAREA  {
 font-family : Arial, Helvetica, sans-serif;
 font-size   : 10pt;
 width       : 100%;
 min-width   : 100%;
 max-width   : 100%;
 resize      : vertical;
 overflow    : auto;
}

INPUT  {
 width       : 67px;
 height      : 24px;
}

.cHead  {
 font-family : Arial, Helvetica, sans-serif;
 font-size   : 10pt;
}

a.cHead       {
 text-decoration:none;
 color:blue;
}

a.cHead:hover  {
 text-decoration:underline;
 color:blue;
}

a.cHead:visited {
 text-decoration:none;
 color:blue;
}

</style>

</head><body linkifytime="53" linkified="0" linkifying="false" link="#0000ff" bgcolor="#ffffff" text="#000000" vlink="#660099">
<a name="top"></a>

<noscript><table width=720 border=0 cellspacing=1 cellpadding=1><tr><td>
<p align=center><font color=red face=Arial,Helvetica,sans-serif style="font-size:10pt;" ><b>
This calculator uses JavaScript.<br>
Please enable JavaScript and reload the page!
</b></font></p></td></tr></table></noscript>



<p>
<table border="0" cellpadding="1" cellspacing="1">
<tbody><tr><td valign="top" width="563">

<h3><font color="#000099" face="Verdana,Arial,Helvetica,sans-serif">
<nobr>Big Integer Calculator: <i>100 digits! A million digits?!</i></nobr>
</font></h3>



</small></font>

<p>

</p><form name="jsForm0" action="#" onsubmit="return false;">
<table border="0" cellpadding="1" cellspacing="0">

<!-- Operands x and y -->
<tbody><tr><td align="right" valign="top"><i>x</i></td><td valign="top">&nbsp;=&nbsp;</td><td align="left" valign="top">
<nobr>
<textarea name="xx" id="xx" value="" cols="75" rows="2" wrap="virtual" style="height: 54px; min-height: 54px;" onkeypress="keypressHandler(event,this.id);" onblur="this.value=vld(this.value);">0</textarea><img style="cursor: pointer ! important; display: none ! important; position: absolute ! important; padding: 0pt ! important; margin: 0pt ! important; border: medium none ! important; width: 28px ! important; height: 14px ! important; opacity: 0.0152174 ! important; left: 523px ! important; top: 149px ! important;" title="It's All Text!" src="100digitbigintcalculator_files/gumdrop.png"><!--img valign=top src=bc.gif title="Clear x" onclick="document.forms[0].xx.value='0'"-->
</nobr>
</td>
</tr>

<tr><td align="right" valign="top"><i>y</i></td><td valign="top">&nbsp;=&nbsp;</td><td align="left" valign="top">
<nobr>
<textarea name="yy" id="yy" value="" cols="75" rows="2" wrap="virtual" style="height: 54px; min-height: 54px;" onkeypress="keypressHandler(event,this.id);" onblur="this.value=vld(this.value);">0</textarea><img style="cursor: pointer ! important; display: none ! important; position: absolute ! important; padding: 0pt ! important; margin: 0pt ! important; border: medium none ! important; width: 28px ! important; height: 14px ! important; opacity: 0.0152174 ! important; left: 523px ! important; top: 208px ! important;" title="It's All Text!" src="100digitbigintcalculator_files/gumdrop.png"><!--img valign=top src=bc.gif title="Clear y" onclick="document.forms[0].yy.value='0'"-->
</nobr>
</td>
</tr>

<!-- Buttons -->
<tr>
<td colspan="2"></td><td><nobr><input value="x + y" onclick="recordPrevAns();this.form.aa.value=      bi_add(this.form.xx.value,this.form.yy.value);showAnsDigits();" type="button">
<input value="x &#8722; y" onclick="recordPrevAns();this.form.aa.value= bi_subtract(this.form.xx.value,this.form.yy.value);showAnsDigits();" type="button">
<input value="x ^ 2" onclick="recordPrevAns();this.form.aa.value=   bi_square(this.form.xx.value);showAnsDigits();" type="button">
<input value="x ^ 3" onclick="recordPrevAns();this.form.aa.value=     bi_cube(this.form.xx.value);showAnsDigits();" type="button">
<input value="x ^ y" onclick="recordPrevAns();this.form.aa.value=      bi_pow(this.form.xx.value,this.form.yy.value);showAnsDigits();" type="button">

<input name="xsy" value="x &#8596; y" title="Swap x and y" onclick="tmp=this.form.xx.value;this.form.xx.value=this.form.yy.value;this.form.yy.value=tmp;" style="background-color: rgb(204, 204, 255);" type="button">
<input name="x2m" value="x &#8594; M" title="Store x in memory" onclick="mem=vld(this.form.xx.value);" style="background-color: rgb(204, 204, 255);" type="button"></nobr></td><td></td></tr>


<tr>
<td colspan="2"></td><td><nobr><input value="x × y" onclick="recordPrevAns();this.form.aa.value= bi_multiply(this.form.xx.value,this.form.yy.value);showAnsDigits();" type="button">
<input value="x / y" onclick="recordPrevAns();this.form.aa.value=   bi_divide(this.form.xx.value,this.form.yy.value);showAnsDigits();" type="button">
<input value="mod" onclick="recordPrevAns();this.form.aa.value=      bi_mod(this.form.xx.value,this.form.yy.value);showAnsDigits();" title="Remainder of the division x/y" type="button">
<input value="sqrmod" onclick="recordPrevAns();this.form.aa.value=   bi_sqrmod(this.form.xx.value,this.form.yy.value);showAnsDigits();" title="Remainder of the division x^2 / y" type="button">
<input value="x × 10^y" onclick="recordPrevAns();this.form.aa.value=bi_exp10(this.form.xx.value,this.form.yy.value);showAnsDigits();" title="Multiply x by 10^y" type="button">

<input name="a2x" accesskey="x" value="ans&#8594; x" onclick="this.form.xx.value=vld(this.form.aa.value);" title="Set x to the last answer" style="background-color: rgb(204, 204, 255);" type="button">
<input name="m2x" value="M &#8594; x" onclick="this.form.xx.value=mem;" title="Set x to the value stored in memory" style="background-color: rgb(204, 204, 255);" type="button"></nobr></td><td></td></tr>


<tr>
<td colspan="2"></td><td><nobr><input value="GCD" onclick="recordPrevAns();this.form.aa.value=       bi_GCD(this.form.xx.value,this.form.yy.value);showAnsDigits();" title="Greatest common divisor of x and y" type="button">
<input value="LCM" onclick="recordPrevAns();this.form.aa.value=       bi_LCM(this.form.xx.value,this.form.yy.value);showAnsDigits();" title="Least common multiple of x and y" type="button">
<input value="x!" onclick="recordPrevAns();this.form.aa.value= bi_factorial(this.form.xx.value);showAnsDigits();" title="Factorial of x" type="button">
<input value="x#" onclick="recordPrevAns();this.form.aa.value= bi_primorial(this.form.xx.value);showAnsDigits();" title="Primorial of x = the product of primes not exceeding x" type="button">
<input value="repeat" onclick="recordPrevAns();this.form.aa.value=repeat(this.form.xx.value,this.form.yy.value);showAnsDigits();" title="Repeat the x value y times" type="button">

<input name="a2y" accesskey="y" value="ans&#8594; y" title="Set y to the last answer" onclick="this.form.yy.value=vld(this.form.aa.value);" style="background-color: rgb(204, 204, 255);" type="button">
<input name="m2y" value="M &#8594; y" title="Set y to the value stored in memory" onclick="this.form.yy.value=mem;" style="background-color: rgb(204, 204, 255);" type="button"></nobr></td><td></td></tr>

<!--
<tr>
<td colspan=2></td><td><nobr>
<input type=button value="prime?"   onclick="recordPrevAns();this.form.aa.value= bi_isPrimeMR(this.form.xx.value);showPrimality();"                     title="Is x prime? (1=true, 0=false)"      >
<input type=button value="next p"   onclick="recordPrevAns();this.form.aa.value= bi_nextPrimeMR(this.form.xx.value);showAnsDigits();"                   title="Next prime after x"                 >
<input type=button value="prev p"   onclick="recordPrevAns();this.form.aa.value= bi_prevPrimeMR(this.form.xx.value);showAnsDigits();"                   title="Largest prime less than x"          >
<input type=button value="MR(x,y)"  onclick="recordPrevAns();this.form.aa.value=bi_millerRabin(this.form.xx.value,this.form.yy.value);showAnsDigits();" title="One round of the Miller-Rabin primality test &#13;(x = large odd positive number, y = base)" >
-->

<tr>
<td colspan="2"></td><td><nobr>
<input value="prime?" onclick="recordPrevAns();this.form.aa.value= isPrimeMR(this.form.xx.value);showPrimality();" title="Is x prime? (1=true, 0=false)" type="button">
<input value="next p" onclick="recordPrevAns();this.form.aa.value= nextPrimeMR(this.form.xx.value);showAnsDigits();" title="Next prime after x" type="button">
<input value="prev p" onclick="recordPrevAns();this.form.aa.value= prevPrimeMR(this.form.xx.value);showAnsDigits();" title="Largest prime less than x" type="button">
<input value="MR(x,y)" onclick="recordPrevAns();this.form.aa.value=bin_millerRabin(this.form.xx.value,this.form.yy.value);showAnsDigits();" title="One round of the Miller-Rabin primality test (x = large odd positive number, y = base)" type="button">

<!-- bi_isPrimeMR -->
<!-- bi_nextPrimeMR -->
<!-- bi_prevPrimeMR -->
<!-- bi_millerRabin -->

<input value="prev ans" onclick="if((tmp=vld(prevans))!=0)this.form.xx.value=tmp;" title="Set x to the previous answer" type="button">

<input name="a2m" value="ans&#8594; M" title="Store the last answer in memory" onclick="mem=vld(this.form.aa.value);" style="background-color: rgb(204, 204, 255);" type="button">
<input accesskey="c" value="clear" title="Clear all" onclick="recordPrevAns();clearAnsDigits();return true;" style="background-color: rgb(204, 204, 255); color: rgb(221, 0, 0); font-weight: bold;" type="reset">


</nobr></td><td></td></tr>



<!--img src=clear.gif border=0 width=1 height=1-->

<!-- Answer -->
<tr><td align="right" valign="top">ans</td><td valign="top">&nbsp;=&nbsp;</td><td align="left" valign="top">
<nobr>
<textarea id="itsalltext_generated_id_aa_1" name="aa" value="" cols="75" rows="2" wrap="virtual" style="height: 54px; min-height: 54px;" readonly="readonly">
</textarea><img style="cursor: pointer ! important; display: none ! important; position: absolute ! important; padding: 0pt ! important; margin: 0pt ! important; border: medium none ! important; width: 28px ! important; height: 14px ! important; opacity: 0.0152174 ! important; left: 523px ! important; top: 370px ! important;" title="It's All Text!" src="100digitbigintcalculator_files/gumdrop.png"><br></nobr><nobr><font size="2" color="gray" face="Arial,Helvetica,sans-serif"><span id="nAnsDigits">&nbsp;</span></font></nobr>

</td>
<td></td></tr>

</tbody></table>
</form>

<script type="text/javascript">
<!-- // Safari under XP does not show arrows on buttons. Substitute the following:
if (navigator.userAgent.indexOf('Chrome')==-1
 && navigator.userAgent.indexOf('Safari')!=-1
 && navigator.userAgent.indexOf('Windows NT 5')!=-1 )
{
 document.forms[0].xsy.value = 'x <\u2212> y'
 document.forms[0].x2m.value = 'x \u2212> M'
 document.forms[0].m2x.value = 'M \u2212> x'
 document.forms[0].m2y.value = 'M \u2212> y'
 document.forms[0].a2m.value = 'ans\u2212> M'
 document.forms[0].a2x.value = 'ans \u2212> x'
 document.forms[0].a2y.value = 'ans \u2212> y'
}
//-->
</script>


<p>
This online big integer calculator is written entirely in JavaScript.
It uses a set of customized functions based in part on the public-domain arbitrary precision arithmetic library BigInt.js.
<nobr>In most operations,</nobr> the script functions create arrays to store arbitrarily large operands;
the larger the number, the more memory and time it takes to process.

</p><p>
The calculator takes two <i>integers</i> <i>x</i> and <i>y</i> as input, and produces <i>integer</i> results.
This means that even when you <i>divide</i> <i>x</i> by <i>y</i>, you always get an integer; the fractional part of the result is truncated.
For example, the operation 14/5 will produce the integer 2, rather than the decimal 2.8.
(To calculate the <i>remainder</i> of division, use the <b>mod</b> button.)


</p><p>
Simplest arithmetic operations support million-digit input values &#8211; and even larger
if the user doesn&#8217;t mind the long wait.

Primality tests (based on the <a href="http://www.javascripter.net/math/primes/millerrabinprimalitytest.htm">Miller-Rabin algorithm</a>)
become noticeably slower when <i>x</i> is over a hundred digits long.
Powers <i>x<sup>y</sup></i> may be slow to compute for input values <i>x</i> containing tens of digits and 3-digit exponents <i>y</i>.
Factorials <i>x</i>! become slow for input values <nobr><i>x</i> &#8776; 10000</nobr>.



<p>
<b>Other calculators:</b>
<br>&#8226;&nbsp;<nobr><a href="http://www.javascripter.net/math/calculators/primefactorscalculator.htm">Prime factorization</a></nobr>
<br>&#8226;&nbsp;<nobr><a href="http://www.javascripter.net/math/calculators/divisorscalculator.htm">Divisors calculator</a></nobr>
<br>&#8226;&nbsp;<nobr><a href="http://www.javascripter.net/math/calculators/eulertotientfunction.htm">Euler's totient function &#966;</a></nobr>
<br>&#8226;&nbsp;<nobr><a href="http://www.javascripter.net/math/calculators/highlycompositenumbers.htm">Highly composite numbers</a></nobr>
</p>


</td>
<td valign="top">


</td>
</tr>
</tbody></table>


<!--Page content ends here; don't delete this comment.-->

</p><p>
<font size="2" face="Arial,Helvetica,sans-serif">
<a href="http://www.javascripter.net/math/index.htm">Doing Math with JavaScript</a>.
<a href="http://www.javascripter.net/math/calculators/legal.htm">Copyright</a>
1999-2012, <a target="_top" href="http://www.javascripter.net/">JavaScripter.net</a>.
</font>

</p></body></html>
